Request:
                         Url:http://localhost/op/api/DataAccess/Create?_rWkQPmFsSZM=0.08661665386796358
                        Data:{"EntityName":"资源","Request":{"Data":[{"类型":"js","名称":"Index","内容":"const $ns = { utils: {}, actions: {}, api: {}, data: {}, layouts: {}, controls: {}, components: {}, pages: {} };\nwindow.OpenDataFramework = $ns;\n((ns) => {\n    ns.utils.Common = class Common {\n\n        static CreateGuid() {\n            let guid = \"\"\n            for (let i = 1; i <= 32; i++) {\n                let n = Math.floor(Math.random() * 16.0).toString(16)\n                guid += n\n                if ((i === 8) || (i === 12) || (i === 16) || (i === 20)) {\n                    guid += \"-\"\n                }\n            }\n            return guid\n        }\n\n        static IsNullOrEmpty(value) {\n            return (value === null || value === undefined) || Common.Trim(value.toString()) === \"\"\n        }\n\n        static Trim(str) {\n            return (str === undefined || str === null) ? \"\" : str.toString().replace(/(^\\s*)|(\\s*$)/g, \"\").replace(new RegExp(\"(^　*)|(　*$)\", \"g\"), \"\")\n        }\n\n        static AddUrlRandom(url) {\n            if (Common.IsNullOrEmpty(url)) { return \"\" }\n\n            const rc = Common.GetRandomChars(), rd = Math.random()\n            url += url.indexOf(\"?\") > 0 ? \"&\" : \"?\"\n            url += `_r${rc}=${rd}`\n\n            return url\n        }\n\n        static GetRandomChars(len) {\n            len = len || 10\n            const chars = \"ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz\", str = []\n            for (let i = 0; i < len; i++) {\n                str.push(chars.charAt(Math.floor(Math.random() * chars.length)))\n            }\n            return str.join(\"\")\n        }\n\n        static InitValue(obj, names, value) {\n            names.forEach((name) => { obj[name] = obj[name] === undefined ? value : obj[name] })\n        }\n\n        static Alert(message) {\n            return new ns.components.AlertConfirm({ Message: message }).Show()\n        }\n\n        static Confirm(message) {\n            return new ns.components.AlertConfirm({ Message: message, IsConfirm: true }).Show()\n        }\n\n        static ArrayFirst(list) {\n            return list && list.length > 0 ? list[0] : null\n        }\n\n        static IsEquals(a, b, c) {\n            if (a === undefined && b === undefined) return true\n            if (a === null && b === null) return true\n            let sa = Common.IsNullOrEmpty(a) ? \"\" : a.toString()\n            let sb = Common.IsNullOrEmpty(b) ? \"\" : b.toString()\n            return c ? sa.toLowerCase() === sb.toLowerCase() : sa === sb\n        }\n\n        static GetQueryString(query) {\n            let args = {}\n            query = query || location.search.substring(1)\n            var pairs = query.split(\"&\")\n            for (let i = 0; i < pairs.length; i++) {\n                let pos = pairs[i].indexOf('=')\n                if (pos === -1) continue\n                let argname = pairs[i].substring(0, pos)\n                let value = pairs[i].substring(pos + 1)\n                args[argname] = unescape(value)\n            }\n            return args\n        }\n\n        static SetStorage(key, value, time) {\n            try {\n                time = time || 0;\n                localStorage.setItem(key, value)\n\n                if (time > 0) {\n                    key += \"_Time\"\n                    var tv = (new Date().getTime() + time * 60 * 1000).toString() + \"_\" + time.toString()\n                    localStorage.setItem(key, tv)\n                }\n            }\n            catch (ex) {\n            }\n        }\n\n        //获取本地缓存\n        static GetStorage(key) {\n            var value = \"\"\n            try {\n                value = localStorage.getItem(key)\n                var tkey = key + \"_Time\";\n                var tvs = localStorage.getItem(tkey)\n                if (!Common.IsNullOrEmpty(tvs)) {\n                    var vs = tvs.split(\"_\")\n                    var tv = parseFloat(vs[0])\n                    var time = parseFloat(vs[1])\n                    if (tv > 0) {\n                        var ct = new Date().getTime()\n                        if (ct > tv) {\n                            value = \"\"\n                            localStorage.removeItem(key)\n                            localStorage.removeItem(tkey)\n                        }\n                        else {\n                            tv = (new Date().getTime() + time * 60 * 1000).toString() + \"_\" + time.toString()\n                            localStorage.setItem(tkey, tv)\n                        }\n                    }\n                }\n            }\n            catch (ex) {\n            }\n            return Common.IsNullOrEmpty(value) ? \"\" : value\n        }\n\n        static ClearStorage() {\n            localStorage.clear()\n        }\n\n        static Split(str, chars) {\n            if (Common.IsNullOrEmpty(str)) return []\n            str = Common.RemoveWhiteEnter(str);\n            let list = []\n            let list2 = [str]\n            chars.forEach(c => {\n                list = list2\n                list2 = []\n                list.forEach(s => {\n                    list2 = list2.concat(s.split(c))\n                })\n            })\n            return list2\n        }\n\n        static GetZIndex() {\n            Common.ZIndex = Common.ZIndex || 1000;\n            Common.ZIndex += 1;\n            return Common.ZIndex;\n        }\n\n        static ComputeStringWidth(str) {\n            if (Common.IsNullOrEmpty(str)) return 0;\n\n            var len = 0;\n            var charCode = -1;\n            for (var i = 0; i < str.length; i++) {\n                charCode = str.charCodeAt(i);\n                if (charCode >= 0 && charCode <= 128) {\n                    len += 1;\n                } else {\n                    len += 2;\n                }\n            }\n            return len * 6;\n        }\n\n        static GetNumberValue(value) {\n            if (Common.IsNullOrEmpty(value)) return 0;\n            value = value.toString().replace(/,/g, \"\");\n            value = value.replace(/M/g, \"\");\n            var newValue = parseFloat(value);\n            return isNaN(newValue) ? 0 : newValue;\n        }\n\n        static GetBoolValue(value) {\n            if (Common.IsNullOrEmpty(value)) return false;\n            let v = value.toString().toLowerCase();\n            if (v === \"true\") return true;\n            if (v === \"1\") return true;\n            return false;\n        }\n\n        static GetObjectValue(obj, numberNames, boolNames) {\n            let data = {};\n            if (numberNames && numberNames.length > 0) numberNames.forEach(n => { if (!Common.IsNullOrEmpty(obj[n])) data[n] = Common.GetNumberValue(obj[n]) });\n            if (boolNames && boolNames.length > 0) boolNames.forEach(b => data[b] = Common.GetBoolValue(obj[b]));\n            for (let key in obj) if (data[key] === undefined) data[key] = obj[key];\n            return data;\n        }\n\n        //去掉空格与回车\n        static RemoveWhiteEnter(str) {\n            str = str.replace(/\\n/g, \"\");\n            while (str.indexOf(\"  \") >= 0) {\n                str = str.replace(/  /g, \" \");\n            }\n            return Common.Trim(str);\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Common } = ns.utils\n\n    ns.utils.HtmlTag = class HtmlTag {\n\n        static GetById(id) {\n            return document.getElementById(id)\n        }\n\n        static SetHtml(ele, html) {\n            if (ele && html !== undefined) {\n                ele.innerHTML = html\n            }\n        }\n\n        static BindEvent(ele, eventName, fn, blUnbind) {\n            if (!ele) return;\n\n            let eventNames = eventName.split(\".\");\n            let name = \"\";\n            if (eventNames.length === 2) {\n                eventName = eventNames[0];\n                name = eventNames[1];\n            }\n            else {\n                name = eventName;\n            }\n\n            if (ele[\"Event_\" + eventName] === undefined) {\n                ele[\"Event_\" + eventName] = {\n                    EventAction: (e) => { eventObj.EventList.forEach(ev => ev.Action(e)) },\n                    EventList: []\n                };\n            }\n\n            let eventObj = ele[\"Event_\" + eventName];\n\n            if (blUnbind) {\n                if (eventObj.EventList.length === 1) {\n                    HtmlTag.RemoveEvent(ele, eventName, eventObj.EventAction)\n                    eventObj.EventList = [];\n                }\n                else {\n                    let index = -1;\n                    for (let i = 0; i < eventObj.EventList.length; i++) {\n                        if (eventObj.EventList[i].Name === name) { index = i; break; }\n                    }\n                    if (index >= 0) eventObj.EventList.splice(index, 1);\n                }\n            }\n            else {\n                let list = eventObj.EventList.filter(f => f.Name === name);\n                list.length === 0 && eventObj.EventList.push({ Name: name, Action: fn });\n\n                if (eventObj.EventList.length === 1) HtmlTag.AddEvent(ele, eventName, eventObj.EventAction);\n            }\n        }\n\n        static OffBindEvent(ele, eventName) {\n            HtmlTag.BindEvent(ele, eventName, null, true);\n        }\n\n        static AddEvent(ele, eventName, fn) {\n            if (ele.addEventListener) {\n                ele.addEventListener(eventName, fn, false)\n            }\n            else if (ele.attachEvent) {\n                ele.attachEvent('on' + eventName, fn)\n            }\n            else {\n                ele[\"on\" + eventName] = fn\n            }\n        }\n\n        static RemoveEvent(ele, eventName, fn) {\n            if (ele.detachEvent) {\n                ele.detachEvent('on' + eventName, fn)\n            }\n            else if (ele.removeEventListener) {\n                ele.removeEventListener(eventName, fn, false)\n            }\n            else {\n                ele[\"on\" + eventName] = null\n            }\n        }\n\n        static GetElement(ele) {\n            return typeof (ele) === \"string\" ? HtmlTag.GetById(ele) : ele\n        }\n\n        static GetValue(ele) {\n            ele = HtmlTag.GetElement(ele)\n            if (ele && ele.value) return ele.value\n            return \"\"\n        }\n\n        static SetValue(ele, value) {\n            ele = HtmlTag.GetElement(ele)\n            if (ele) ele.value = value\n        }\n\n        static SetDisabled(ele, disabled) {\n            ele = HtmlTag.GetElement(ele)\n            if (ele) ele.disabled = disabled\n        }\n\n        static GetDisabled(ele) {\n            ele = HtmlTag.GetElement(ele)\n            if (ele) return ele.disabled\n            return false\n        }\n\n        static Find(ele, tags) {\n            if (!ele || !tags || !ele.hasChildNodes()) return null\n\n            let tagList = tags.split(\">\")\n            const tagName = tagList[0]\n            tagList.splice(0, 1)\n\n            let childList = []\n            ele.childNodes.forEach(c => {\n                if (c.nodeName.toLowerCase() === tagName.toLowerCase()) childList.push(c)\n            })\n\n            if (tagList.length > 0) {\n                tags = tagList.join(\">\")\n                let childList2 = [], list = null\n\n                childList.forEach((c) => {\n                    list = HtmlTag.Find(e, tags)\n                    if (list != null) childList2 = childList2.concat(list)\n                })\n\n                return childList2\n            }\n            else {\n                return childList\n            }\n        }\n\n        static AppendHtml(ele, html) {\n            var div = document.createElement(\"div\")\n            HtmlTag.SetHtml(div, html)\n            while (div.childNodes.length > 0) {\n                ele.appendChild(div.childNodes[0])\n            }\n        }\n\n        static GetElementsByTagName(ele, tagName) {\n            return ele && ele.getElementsByTagName(tagName);\n        }\n\n        static SetHide(ele) {\n            if (ele && ele.style) ele.style.display = \"none\"\n        }\n\n        static SetShow(ele) {\n            if (ele && ele.style) ele.style.display = \"\"\n        }\n\n        static GetBodyWidth() {\n            return document.body.offsetWidth\n        }\n\n        static GetBodyHeight() {\n            return document.body.offsetHeight\n        }\n\n        static GetWindowWidth() {\n            return window.innerWidth\n        }\n\n        static GetWindowHeight() {\n            return window.innerHeight\n        }\n\n        static GetWidth(ele) {\n            if (ele && ele.style) {\n                if (ele.style.width === \"\") {\n                    return ele.parentNode !== null ? HtmlTag.GetWidth(ele.parentNode) : HtmlTag.GetBodyWidth()\n                }\n                else if (ele.style.width.indexOf(\"%\") > 0) {\n                    return HtmlTag.GetWidth(ele.parentNode) * parseFloat(ele.style.width) / 100\n                }\n                else {\n                    return parseFloat(ele.style.width)\n                }\n            }\n            return ele.body ? HtmlTag.GetBodyWidth() : 0\n        }\n\n        static SetWidth(ele, width) {\n            if (ele && ele.style) {\n                let w = parseFloat(width);\n                if (!isNaN(w)) ele.style.width = w.toString() + \"px\"\n            }\n        }\n\n        static GetHeight(ele) {\n            if (ele && ele.style) {\n                if (ele.style.height === \"\") {\n                    return ele.parentNode !== null ? HtmlTag.GetHeight(ele.parentNode) : HtmlTag.GetBodyHeight()\n                }\n                else if (ele.style.height.indexOf(\"%\") > 0) {\n                    return HtmlTag.GetHeight(ele.parentNode) * parseFloat(ele.style.height) / 100\n                }\n                else {\n                    return parseFloat(ele.style.height)\n                }\n            }\n            return ele.body ? HtmlTag.GetBodyHeight() : 0\n        }\n\n        static SetHeight(ele, height) {\n            if (ele && ele.style) {\n                let w = parseFloat(height);\n                if (!isNaN(w)) ele.style.height = w.toString() + \"px\"\n            }\n        }\n\n        static SetStyle(ele, style) {\n            if (ele && ele.style && style) {\n                for (var key in style) {\n                    ele.style[key] = style[key]\n                }\n            }\n        }\n\n        static SetStyleValue(ele, key, value) {\n            if (ele && ele.style) {\n                ele.style[key] = value\n            }\n        }\n\n        static RemoveClass(ele, className) {\n            if (ele && ele.className !== undefined) {\n                ele.className = Common.Trim(ele.className.replace(new RegExp(className, \"g\"), \"\").replace(new RegExp(\"  \", \"g\"), \"\"))\n            }\n        }\n\n        static AddClass(ele, className) {\n            if (ele && ele.className !== undefined) {\n                let cn = Common.Trim(ele.className).replace(new RegExp(className, \"g\"), \"\").replace(new RegExp(\"  \", \"g\"), \"\")\n                cn = cn + \" \" + className\n                ele.className = Common.Trim(cn)\n            }\n        }\n\n        static RemoveElement(parentNode, ele) {\n            if (parentNode && ele && parentNode.removeChild && parentNode.hasChildNodes) {\n                if (parentNode.contains) {\n                    parentNode.contains(ele) && parentNode.removeChild(ele);\n                }\n                else {\n                    let blExists = false;\n                    for (let i = 0; i < parentNode.childNodes.length; i++) {\n                        if (parentNode.childNodes[i] === ele) {\n                            blExists = true;\n                            break;\n                        }\n                    }\n                    if (blExists) parentNode.removeChild(ele);\n                }\n            }\n        }\n\n        static GetOffSet(ele) {\n            if (ele) {\n                let topLeft = HtmlTag.GetTopLeft(ele.parentNode)\n\n                return {\n                    top: ele.offsetTop + topLeft.top,\n                    left: ele.offsetLeft + topLeft.left,\n                    width: ele.offsetWidth,\n                    height: ele.offsetHeight\n                }\n            }\n            return null\n        }\n\n        static GetTopLeft(ele, topLeft) {\n            topLeft = topLeft || { top: 0, left: 0 };\n            if (ele && HtmlTag.GetStyleValue(ele, \"position\") === \"absolute\") {\n                topLeft = {\n                    top: topLeft.top + parseFloat(ele.style.top),\n                    left: topLeft.left + parseFloat(ele.style.left)\n                }\n                return topLeft;\n            }\n            else if (ele && ele !== document.body) {\n                return HtmlTag.GetTopLeft(ele.parentNode, topLeft);\n            }\n\n            return topLeft;\n        }\n\n        static GetStyleValue(ele, name) {\n            if (!ele) return \"\";\n            if (ele.style && ele.style[name]) return ele.style[name];\n            let styles = HtmlTag.GetStyles(ele);\n            if (styles && styles[name]) return styles[name];\n            return \"\";\n        }\n\n        static ComputeStringWidth(str) {\n            if (Common.IsNullOrEmpty(str)) return 0;\n\n            HtmlTag.SpanId = HtmlTag.SpanId || Common.CreateGuid();\n            let span = HtmlTag.GetById(HtmlTag.SpanId);\n            if (span === null) {\n                span = document.createElement(\"span\");\n                span.id = HtmlTag.SpanId;\n                span.style.visibility = \"hidden\";\n                document.body.appendChild(span)\n            }\n            span.innerHTML = \"\";\n            let width = span.offsetWidth;\n            span.innerHTML = str;\n            width = span.offsetWidth - width;\n            span.innerHTML = \"\";\n            return width;\n        }\n\n        static GetStyles(ele) {\n            if (!ele) return null;\n            if (ele.ownerDocument) return ele.ownerDocument.defaultView.getComputedStyle(ele);\n            else if (ele.currentStyle) return ele.currentStyle;\n            return null;\n        }\n\n    }\n\n})($ns);\n((ns) => {\n    const { Common } = ns.utils\n\n    ns.api.Index = class Index {\n        constructor(options) {\n            this.Id = Common.CreateGuid()\n\n            options && Object.assign(this, options)\n        }\n\n        PostFetch(url, data) {\n            return fetch(this.GetFullUrl(url), {\n                method: \"POST\",\n                body: JSON.stringify(data)\n            }).then(res => this.SetResult(res).then(d => this.GetResponse(d)))\n        }\n\n        PostStreamFetch(url, data) {\n            return fetch(Common.AddUrlRandom(url), {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/octet-stream\" },\n                body: data\n            }).then(res => this.SetResult(res).then(d => this.GetResponse(d)))\n        }\n\n        GetResponse(res) {\n            if (res && res.Ack) {\n                if (res.Ack.IsSuccess) {\n                    return Promise.resolve(res.Data)\n                }\n                else if (res.Ack.StatusMessage) {\n                    return Promise.reject(res.Ack.StatusMessage)\n                }\n            }\n\n            return Promise.reject(\"请求异常！\")\n        }\n\n        SetResult(res) {\n            return res.ok ? res.json() : Promise.reject(res.status + \":\" + (!res.statusText ? \"请求错误！\" : res.statusText))\n        }\n\n        GetFullUrl(url) {\n            url = this.GetRootPath() + url\n            return Common.AddUrlRandom(url)\n        }\n\n        GetRootPath() {\n            return \"api/\"\n        }\n\n    }\n\n})($ns);\n((ns) => {\n    const { Index } = ns.api\n\n    ns.api.DataAccess = class DataAccess extends Index {\n        constructor(options) {\n            super(options)\n        }\n\n        Request(type, entityName, request) {\n            const data = {\n                EntityName: entityName,\n                Request: request\n            }\n            return this.PostFetch(`DataAccess/${type}`, data)\n        }\n\n        Query(entityName, request) {\n            return this.Request(\"Query\", entityName, request)\n        }\n\n        Create(entityName, request) {\n            return this.Request(\"Create\", entityName, request)\n        }\n\n        Update(entityName, request) {\n            return this.Request(\"Update\", entityName, request)\n        }\n\n        Delete(entityName, request) {\n            return this.Request(\"Delete\", entityName, request)\n        }\n    }\n\n})($ns);\n((ns) => {\n    const StatePool = [], ConnectPool = [], StateData = {}\n\n    ns.data.Index = class Index {\n\n        static AddStatePool(state) {\n            Index.SetState(state)\n            StatePool.push(state)\n        }\n\n        static SetState(state, action) {\n            for (let key in state) {\n                StateData[key] = state[key](StateData[key], action)\n            }\n        }\n\n        static GetState() {\n            return StateData\n        }\n\n        static Dispatch(action) {\n            StatePool.forEach((s) => Index.SetState(s, action))\n            ConnectPool.forEach((c) => c(StateData))\n        }\n\n        static Connect(c) {\n            c(StateData)\n            ConnectPool.push(c)\n        }\n\n        static GetStateValue(state, key, name, currentValue) {\n            if (state[key]) {\n                const value = state[key][name]\n                if (currentValue !== value) { return Promise.resolve(value) }\n            }\n            return Promise.resolve(null)\n        }\n    }\n\n})($ns);\n((ns) => {\n\n    const initialState = {\n        QueryResponse: null,\n        DeleteResponse: null\n    }\n\n    ns.data.Index.InitListPageEntityState = (key) => {\n        const sp = {}\n\n        sp[key] = (state, action) => {\n            if (!action) return initialState\n            switch (action.type) {\n                case `${key}_Search_Data`:\n                    state.QueryResponse = action.data\n                    return state\n                case `${key}_Delete`:\n                    state.DeleteResponse = action.data\n                    return state\n                default:\n                    return state\n            }\n        }\n\n        ns.data.Index.AddStatePool(sp)\n    }\n\n})($ns);\n((ns) => {\n\n    const initialState = {\n        EditResponse: null\n    }\n\n    ns.data.Index.InitEditPageEntityState = (key) => {\n        const sp = {}\n\n        sp[key] = (state, action) => {\n            if (!action) return initialState\n            switch (action.type) {\n                case `${key}_Create`:\n                case `${key}_Update`:\n                    state.EditResponse = action.data\n                    return state\n                default:\n                    return state\n            }\n        }\n\n        ns.data.Index.AddStatePool(sp)\n    }\n\n})($ns);\n((ns) => {\n    const { Common } = ns.utils\n\n    ns.data.Cache = class Cache {\n\n        static GetDataList(cacheName, entityName, selectNames, conditions) {\n            let data = Cache.GetCache(cacheName)\n            if (data) return Promise.resolve(data)\n\n            let indexAction = new ns.actions.Index(Cache)\n            return indexAction.GetDataList(entityName, selectNames, conditions).then(res => {\n                if (res.IsSuccess) {\n                    Cache.SetCache(cacheName, res.Data.DataList)\n                    return Promise.resolve(res.Data.DataList)\n                }\n                else return Promise.resolve(null)\n            })\n        }\n\n        static GetCache(cacheName) {\n            const dataString = Common.GetStorage(cacheName)\n            if (!Common.IsNullOrEmpty(dataString)) return JSON.parse(dataString)\n            return null\n        }\n\n        static SetCache(cacheName, data) {\n            Common.SetStorage(cacheName, JSON.stringify(data))\n        }\n\n        static GetPropertyDataList(p) {\n            if (!p.DataSource) return;\n            const { CacheName, EntityName, SelectNames, Conditions, TextName, ValueName } = p.DataSource;\n            p.ValueName = ValueName;\n            p.TextName = TextName;\n            let cacheName = CacheName || EntityName;\n            let condtions = Conditions || [];\n\n            return Cache.GetDataList(cacheName, EntityName, SelectNames, condtions).then(res => {\n                p.DataList = res ? res : [];\n                if (p.ExpandSetDataList) p.DataList = p.ExpandSetDataList(p.DataList);\n                return Promise.resolve()\n            });\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Common } = ns.utils\n    const { DataAccess } = ns.api\n    const { Dispatch, GetStateValue } = ns.data.Index\n\n    ns.actions.Index = class Index {\n        constructor(target) {\n            this.Id = Common.CreateGuid()\n            this.EventNames = [\"click\"]\n            this.Target = target\n\n            this.Api = new DataAccess()\n        }\n\n        Invoke(e, c) { }\n\n        DispatchAction(apiAction) {\n            return (dispatch, type, setResult) =>\n                apiAction().then(res => {\n                    setResult && setResult(res)\n                    dispatch && dispatch({ type: type, data: res })\n                    return Promise.resolve({ IsSuccess: true, Data: res })\n                }, res => {\n                    const msg = res && res.message ? res.message : res\n                    dispatch && dispatch({ type: type, data: { ActionFailedMessage: msg } })\n                    return Promise.resolve({ IsSuccess: false, Message: msg })\n                })\n        }\n\n        Edit(c, blUpdate) {\n            const { Entity, KeyName, EditDialog } = this.Target\n\n            let editData = this.Target.GetEditData()\n            if (editData === false) return\n\n            if (this.Target.IsLocalData) {\n                if (!blUpdate) editData[this.Target.Entity.PrimaryKey] = Common.CreateGuid()\n                this.Target.SaveData(editData)\n                this.Target.ClearControlValue()\n                EditDialog.Close()\n                return\n            }\n\n            c.SetDisabled(true)\n\n            const request = { Data: [editData] }\n\n            const name = blUpdate ? \"Update\" : \"Create\"\n            this.DispatchAction(() => this.Api[name](Entity.Name, request))(Dispatch, KeyName + \"_\" + name).then(res => {\n                if (res.IsSuccess) {\n                    Common.Alert(\"操作成功！\").then(() => {\n                        this.Target.ClearControlValue()\n                        EditDialog.Close()\n                    })\n                }\n                else {\n                    Common.Alert(res.Message).then(() => c.SetDisabled(false))\n                }\n            })\n        }\n\n        GetDataValue(state, keyName, name) {\n            return GetStateValue(state, keyName, name, this[name]).then((v) => {\n                if (v != null) { this[name] = v }\n                return Promise.resolve(v != null)\n            })\n        }\n\n        GetDataList(entityName, selectNames, conditions) {\n            const request = {\n                SelectNames: selectNames,\n                Conditions: conditions\n            }\n\n            return this.DispatchAction(() => this.Api.Query(entityName, request))()\n        }\n\n        GetEntityData(entity, selectNames, id) {\n            const request = {\n                IsRowVersion: true,\n                SelectNames: selectNames,\n                Conditions: [{ Name: entity.PrimaryKey, Logic: \"=\", Value: id }]\n            }\n\n            if (entity.ComplexQueryList && entity.ComplexQueryList.length > 0) {\n                request.ComplexQueryList = []\n                entity.ComplexQueryList.forEach(c => {\n                    request.ComplexQueryList.push(Object.assign({\n                        Conditions: [{ Name: entity.PrimaryKey, Logic: \"=\", Value: id }]\n                    }, c))\n                })\n            }\n\n            return this.DispatchAction(() => this.Api.Query(entity.Name, request))()\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Index } = ns.actions\n    const { Common, HtmlTag } = ns.utils\n    const { Dispatch, Connect } = ns.data.Index\n\n    ns.actions.SearchAction = class SearchAction extends Index {\n        constructor(page) {\n            super(page)\n\n            this.Page = page\n            this.Label = this.Label || \"查询\"\n            this.PageIndex = this.PageIndex || 1\n            this.ConditionList = this.ConditionList || []\n            this.InitConditionList = this.InitConditionList || []\n\n            this.Init()\n        }\n\n        GetConditionList() {\n            this.ConditionList = this.Page.GetSearchCondition()\n            return this.ConditionList\n        }\n\n        Invoke(e, c) {\n            this.PageIndex = 1\n            this.Search(e, c, false)\n        }\n\n        Search(e, c, p, ids) {\n            const { Entity, SelectNames, IsPage, PageSize, KeyName } = this.Page\n            if (!p) this.GetConditionList()\n\n            if (Entity.IsSelectKey) SelectNames.splice(0, 0, Entity.PrimaryKey)\n            const request = {\n                IsPage: IsPage,\n                IsRowVersion: true,\n                PageIndex: this.PageIndex,\n                PageSize: PageSize,\n                SelectNames: SelectNames,\n                Conditions: this.ConditionList,\n                OrderBys: this.Page.GetOrderByList()\n            }\n\n            this.DispatchAction(() => this.Api.Query(Entity.Name, request))(Dispatch, KeyName + \"_Search_Data\", (res) => {\n                if (ids) res.Ids = ids\n            }).then(res => {\n                if (res.IsSuccess && res.Data.PageRecord >= 0) this.PageRecord = res.Data.PageRecord\n            })\n        }\n\n        Init() {\n            const { Entity } = this.Page\n\n            Connect(state => {\n                let keyName = \"EditPage_\" + Entity.Id\n\n                this.GetDataValue(state, keyName, \"EditResponse\").then(res => {\n                    res && this.SetEditResponse()\n                })\n\n                this.GetDataValue(state, this.Page.KeyName, \"DeleteResponse\").then(res => {\n                    res && this.SetDeleteResponse()\n                })\n            })\n        }\n\n        SetEditResponse() {\n            let res = this.EditResponse\n            if (res == null) { return }\n\n            if (res.Ids) {\n                if (res.RequestType === \"Create\") this.InsertRefresh()\n                this.Search(null, null, true, res.Ids)\n            }\n        }\n\n        InsertRefresh() {\n            this.Page.SetInitConditionList(this.InitConditionList)\n            this.ConditionList = this.InitConditionList.map(c => c)\n        }\n\n        ExcelRefresh() {\n            this.InsertRefresh()\n            this.Search(null, null, true)\n        }\n\n        SetDeleteResponse() {\n            let res = this.DeleteResponse\n            if (res == null) { return }\n\n            if (res.IsDelete) {\n                if (res.RowCount === 1 && this.PageIndex > 1) this.PageIndex -= 1\n                this.Search(null, null, true)\n            }\n        }\n    }\n\n    ns.actions.NewAddAction = class NewAddAction extends Index {\n        constructor(page) {\n            super(page)\n\n            this.Page = page\n            this.Label = this.Label || \"新增\"\n        }\n\n        Invoke(e, c) {\n            new ns.pages.EditPage({ Entity: this.Page.Entity }).Load()\n        }\n    }\n\n    ns.actions.EditAction = class EditAction extends Index {\n        constructor(dataGrid) {\n            super(dataGrid)\n\n            this.DataGrid = dataGrid\n            this.Label = this.Label || \"修改\"\n        }\n\n        Invoke(e, c) {\n            new ns.pages.EditPage({\n                Entity: this.DataGrid.Entity,\n                IsLocalData: this.DataGrid.IsLocalData,\n                SaveData: (d) => this.DataGrid.SaveData(d),\n                RowData: c.RowData,\n                IsUpdate: true\n            }).Load()\n        }\n    }\n\n    ns.actions.DeleteAction = class DeleteAction extends Index {\n        constructor(dataGrid) {\n            super(dataGrid)\n\n            this.DataGrid = dataGrid\n            this.Label = this.Label || \"删除\"\n        }\n\n        Invoke(e, c) {\n            if (this.DataGrid.IsLocalData) {\n                this.DataGrid.DeleteData(c.RowData[this.DataGrid.Entity.PrimaryKey])\n                return\n            }\n\n            Common.Confirm(\"确认要删除吗？\").then(() => {\n                const { Entity, RowCount, KeyName } = this.DataGrid\n\n                let data = {}\n                data[Entity.PrimaryKey] = c.RowData[Entity.PrimaryKey]\n                data.RowVersion = c.RowData.RowVersion\n\n                const request = { Data: [data] }\n\n                this.DispatchAction(() => this.Api.Delete(Entity.Name, request))(Dispatch, KeyName + \"_Delete\", res => res.RowCount = RowCount).then(res => {\n                    if (!res.IsSuccess) Common.Alert(res.Message)\n                })\n            })\n        }\n    }\n\n    ns.actions.PagingAction = class PagingAction extends Index {\n        constructor(dataPaging) {\n            super(dataPaging)\n\n            this.DataPaging = dataPaging\n            this.SearchAction = this.DataPaging.SearchAction\n        }\n\n        Invoke(e, c) {\n            this.SearchAction.PageIndex = this.GetPageIndex()\n            this.SearchAction.Search(e, c, true)\n        }\n\n        GetPageIndex() {\n            let pageIndex = this.SearchAction.PageIndex\n            switch (this.Type) {\n                case \"First\": return 1\n                case \"Pre\": return pageIndex - 1\n                case \"Next\": return pageIndex + 1\n                case \"Last\": return this.DataPaging.PageCount\n                default: this.pageIndex\n            }\n        }\n    }\n\n    ns.actions.PagingFirstAction = class PagingFirstAction extends ns.actions.PagingAction {\n        constructor(dataPaging) {\n            super(dataPaging)\n\n            this.Label = \"<<\"\n            this.Title = \"首页\"\n            this.Type = \"First\"\n        }\n    }\n\n    ns.actions.PagingPreAction = class PagingPreAction extends ns.actions.PagingAction {\n        constructor(dataPaging) {\n            super(dataPaging)\n\n            this.Label = \"<\"\n            this.Title = \"上页\"\n            this.Type = \"Pre\"\n        }\n    }\n\n    ns.actions.PagingNextAction = class PagingNextAction extends ns.actions.PagingAction {\n        constructor(dataPaging) {\n            super(dataPaging)\n\n            this.Label = \">\"\n            this.Title = \"下页\"\n            this.Type = \"Next\"\n        }\n    }\n\n    ns.actions.PagingLastAction = class PagingLastAction extends ns.actions.PagingAction {\n        constructor(options) {\n            super(options)\n\n            this.Label = \">>\"\n            this.Title = \"尾页\"\n            this.Type = \"Last\"\n        }\n    }\n\n    ns.actions.PagingIndexQueryAction = class PagingIndexQueryAction extends Index {\n        constructor(options) {\n            super(options)\n\n            this.Label = \"确定\"\n\n            this.DataPaging = options\n            this.SearchAction = this.DataPaging.SearchAction\n        }\n\n        Invoke(e, c) {\n            let pageIndex = this.DataPaging.GetInputPageIndex()\n            if (pageIndex === false) return\n\n            this.SearchAction.PageIndex = pageIndex\n            this.SearchAction.Search(e, c, true)\n        }\n    }\n\n    ns.actions.ExcelExportAction = class ExcelExportAction extends Index {\n        constructor(page) {\n            super(page)\n\n            this.Label = \"Excel导出\"\n            this.Width = 80\n            this.Page = page\n            this.SearchAction = page.SearchActions[0]\n        }\n\n        Invoke(e, c) {\n            if (this.SearchAction.PageRecord > 50000) {\n                Common.Alert(\"对不起，您要导出的数据量超过5万条，请先进行相应的数据筛选！\")\n                return\n            }\n\n            Common.Confirm(\"确定将数据Excel导出吗？\").then(() => this.ExcelExport(c))\n        }\n\n        ExcelExport(c) {\n            c.SetDisabled(true)\n\n            const { Entity, SelectNames } = this.Page\n\n            const request = {\n                IsExcel: true,\n                Title: Entity.Label,\n                SelectNames: SelectNames,\n                Conditions: this.SearchAction.ConditionList,\n                OrderBys: this.Page.GetOrderByList(),\n                HeaderInfos: this.Page.GetHeaderInfoList()\n            }\n\n            this.DispatchAction(() => this.Api.Query(Entity.Name, request))().then(res => {\n                c.SetDisabled(false)\n                if (res.IsSuccess && res.Data.FileName) this.DownLoad(res.Data.FileName)\n                else if (res.Message) Common.Alert(res.Message)\n            })\n        }\n\n        DownLoad(fileName) {\n            var url = \"download.aspx?fn=\" + fileName\n            window.open(url, \"_self\")\n        }\n    }\n\n    ns.actions.ExcelImportAction = class ExcelImportAction extends Index {\n        constructor(page) {\n            super(page)\n\n            this.Label = \"Excel导入\"\n            this.Width = 80\n            this.Page = page\n            this.SearchAction = page.SearchActions[0]\n        }\n\n        Invoke(e, c) {\n            new ns.components.ExcelImport({\n                Entity: this.Page.Entity,\n                SearchAction: this.SearchAction,\n                Api: this.Api\n            }).Import()\n        }\n    }\n\n    ns.actions.ChangePasswordAction = class ChangePasswordAction extends Index {\n        constructor(page) {\n            super(page)\n\n            this.Label = \"修改密码\"\n            this.Page = page\n        }\n\n        Invoke(e, c) {\n        }\n    }\n    \n})($ns);\n((ns) => {\n    const { Index } = ns.actions\n\n    ns.actions.DialogOkAction = class DialogOkAction extends Index {\n        constructor(dialog) {\n            super(dialog)\n\n            this.Dialog = dialog\n            this.Label = this.Label || \"确定\"\n        }\n\n        Invoke(e, c) {\n            this.Dialog.OkAction && this.Dialog.OkAction.Invoke(e, c)\n        }\n    }\n\n    ns.actions.DialogCancelAction = class DialogCancelAction extends Index {\n        constructor(dialog) {\n            super(dialog)\n\n            this.Dialog = dialog\n            this.Label = this.Label || \"取消\"\n        }\n\n        Invoke(e, c) {\n            this.Dialog.Close()\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Index } = ns.actions\n    const { Common } = ns.utils\n\n    ns.actions.CreateAction = class CreateAction extends Index {\n        constructor(page) {\n            super(page)\n\n            this.Page = page\n        }\n\n        Invoke(e, c) {\n            this.Edit(c)\n        }\n    }\n\n    ns.actions.UpdateAction = class UpdateAction extends Index {\n        constructor(options) {\n            super(options)\n        }\n\n        Invoke(e, c) {\n            this.Edit(c, true)\n        }\n    }\n\n    ns.actions.GridViewAddAction = class GridViewAddAction extends Index {\n        constructor(gridView) {\n            super(gridView)\n\n            this.Label = \"添加\"\n            this.GridView = gridView\n        }\n\n        Invoke(e, c) {\n            new ns.pages.EditPage({ Entity: this.GridView.Entity, IsLocalData: true, SaveData: (d) => this.GridView.SaveData(d) }).Load()\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Common, HtmlTag } = ns.utils\n\n    ns.controls.Index = class Index {\n        constructor(options) {\n            this.Id = Common.CreateGuid()\n            this.Attributes = []\n\n            options && Object.assign(this, options)\n\n            this.Height = this.Height || 30\n        }\n\n        GetHtml() { return \"\" }\n        EventLoad2() { }\n        DataLoad2() { }\n\n        EventLoad() {\n            this.Element = HtmlTag.GetById(this.Id)\n            this.EventLoad2()\n        }\n\n        GetRowClassName() { return \"\" }\n\n        DataLoad() {\n            this.DataLoad2();\n        }\n\n        GetAttributeHtml() {\n            return this.Attributes.map((a) => this.GetAttributeItem(a)).join(\"\")\n        }\n\n        GetAttributeItem(a) {\n            return ` ${a.Name}=\"${a.Value}\"`\n        }\n\n        SetAttribute(name, value) {\n            this.Attributes.push({ Name: name, Value: value })\n        }\n\n        GetInputHtml(type) {\n            let html = []\n\n            html.push(`<input id=\"${this.Id}\" type=\"${type}\"`)\n\n            html.push(this.GetAttributeHtml())\n\n            html.push(\"/>\")\n\n            return html.join(\"\")\n        }\n\n        GetValue() {\n            if (this.ControlType === \"CheckBox\") {\n                return this.GetCheckBoxValue()\n            }\n            let value = HtmlTag.GetValue(this.Element)\n            this.Value = Common.IsNullOrEmpty(value) ? \"\" : Common.Trim(value)\n            return this.Value;\n        }\n\n        SetValue(value) {\n            if (this.ControlType === \"CheckBox\") {\n                this.SetCheckBoxValue(value)\n                return\n            }\n            value = value === undefined ? \"\" : value\n            this.Value = value;\n            HtmlTag.SetValue(this.Element, value)\n        }\n\n        SetDisabled(disabled) {\n            HtmlTag.SetDisabled(this.Element, disabled)\n        }\n\n        GetDisabled() {\n            return HtmlTag.GetDisabled(this.Element)\n        }\n\n        GetStyle(styleList) {\n            return styleList.length === 0 ? \"\" : \" style=\\\"\" + styleList.join(\"\") + \"\\\"\"\n        }\n\n        GetClass() {\n            return this.ClassName ? \" class=\" + this.ClassName : \"\"\n        }\n\n        GetDataList() {\n            return ns.data.Cache.GetPropertyDataList(this)\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Index } = ns.controls\n    const { Common, HtmlTag } = ns.utils\n\n    ns.controls.SpanLabel = class SpanLabel extends Index {\n        constructor(options) {\n            super(options)\n\n            if (this.LabelWidth) this.Width = this.LabelWidth\n            this.Width = this.Width || 100\n\n            Common.InitValue(this, [\"IsColon\", \"IsWidth\"], true)\n        }\n\n        GetHtml() {\n            if (!this.Label || this.ControlType === \"CheckBox\" || this.ControlType === \"GridView\") {\n                this.Width = 0\n                return \"\"\n            }\n\n            const colon = this.IsColon ? \"：\" : \"\"\n\n            let styleList = []\n            if (this.IsWidth) styleList.push(`width:${this.Width}px;`)\n            let style = this.GetStyle(styleList)\n\n            let className = this.GetClass()\n\n            return `<span id=\"${this.Id}\"${style}${className}>${this.Label}${colon}</span>`\n        }\n\n        SetValue(value) {\n            HtmlTag.SetHtml(this.Element, value)\n        }\n    }\n\n    ns.controls.DataSpan = class DataSpan extends Index {\n        constructor(options) {\n            super(options)\n        }\n\n        GetHtml() {\n            this.Value = Common.IsNullOrEmpty(this.Value) ? \"\" : this.Value\n            if (!this.IsLabel) this.SetValue()\n            return `<span id=\"${this.Id}\" style=\"padding:1px 2px 1px 2px;\">${this.Value}</span>`\n        }\n\n        SetValue() {\n            if (this.Options && this.Options.length > 0) {\n                this.SetValuText(this.Options, \"Value\", \"Text\");\n            }\n            else if (this.DataList && this.DataList.length > 0) {\n                this.SetValuText(this.DataList, this.ValueName, this.TextName);\n            }\n\n            if (this.ControlType === \"CheckBox\") {\n                this.CheckedText = this.CheckedText === undefined ? \"是\" : this.CheckedText\n                this.UnCheckedText = this.UnCheckedText === undefined ? \"否\" : this.UnCheckedText\n                let checkedValue = this.CheckedValue === undefined ? true : this.CheckedValue\n                this.Value = Common.IsEquals(this.Value, checkedValue, true) ? this.CheckedText : this.UnCheckedText\n            }\n        }\n\n        SetValuText(dataList, valueName, textName, blSet) {\n            let list = dataList.filter(f => f[valueName] !== undefined && Common.IsEquals(f[valueName], this.Value))\n            if (list.length > 0) {\n                this.Value = list[0][textName]\n                blSet && HtmlTag.SetHtml(this.Element, this.Value)\n            }\n        }\n\n        DataLoad2() {\n            if (!this.DataList && this.DataSource) {\n                this.GetDataList().then(() => this.SetValuText(this > DataList, this.ValueName, this.TextName, true))\n            }\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Index } = ns.controls\n    const { Common, HtmlTag } = ns.utils\n\n    ns.controls.TextBox = class TextBox extends Index {\n        constructor(options) {\n            super(options)\n\n            if (this.ControlWidth) this.Width = this.ControlWidth\n            this.Width = this.Width || 200\n        }\n\n        GetHtml() {\n            this.SetAttribute(\"name\", this.Name)\n            this.MaxLength > 0 && this.SetAttribute(\"maxlength\", this.MaxLength)\n            this.IsInput() && this.SetAttribute(\"autocomplete\", \"off\")\n            this.ClassName && this.SetAttribute(\"class\", this.ClassName)\n            this.PlaceHolder && this.SetAttribute(\"placeholder\", this.PlaceHolder)\n            this.Checked && this.SetAttribute(\"checked\", \"checked\")\n            this.DefaultValue && this.SetAttribute(\"value\", this.DefaultValue)\n\n            let styleList = []\n            this.IsInput() && styleList.push(`width:${this.Width}px;`)\n            styleList.length > 0 && this.SetAttribute(\"style\", styleList.join(\"\"))\n\n            switch (this.ControlType) {\n                case \"Password\": return this.GetInputHtml(\"password\")\n                case \"CheckBox\": return this.GetCheckBoxHtml(this.GetInputHtml(\"checkbox\"))\n                case \"TextDate\": return this.GetInputHtml(\"date\")\n                default: return this.GetInputHtml(\"text\")\n            }\n        }\n\n        GetCheckBoxHtml(html) {\n            let label = this.Label.replace(\"是否\", \"\")\n            return \"<div class=\\\"DivCheckBox\\\" style=\\\"margin-left:\" + (this.LabelWidth + 5) + \"px;\\\"><label>\" + html + \"<span>\" + label + \"</span></label></div>\"\n        }\n\n        GetCheckBoxValue() {\n            let checkedValue = this.CheckedValue !== undefined ? this.CheckedValue : true\n            let unCheckedValue = this.UnCheckedValue !== undefined ? this.UnCheckedValue : false\n            return this.Element.checked ? checkedValue : unCheckedValue\n        }\n\n        SetCheckBoxValue(value) {\n            let v = Common.IsNullOrEmpty(value) ? \"\" : value.toString().toLowerCase()\n            let checkedValue = this.CheckedValue !== undefined ? this.CheckedValue : true\n            this.Element.checked = v === checkedValue.toString().toLowerCase()\n        }\n\n        IsInput() {\n            return this.ControlType !== \"CheckBox\" && this.ControlType !== \"Radio\"\n        }\n\n        EventLoad3() { }\n        DataLoad3() { }\n\n        EventLoad2() {\n            if (this.EnterControl) HtmlTag.BindEvent(this.Element, \"keypress\", (e) => this.KeypressEnter(e))\n            this.EventLoad3()\n        }\n\n        DataLoad2() {\n            this.DataLoad3()\n        }\n\n        KeypressEnter(e) {\n            if (!this.EnterControl.Element) return\n            var key = window.event ? e.keyCode : e.which;\n            if (key == 13) {\n                this.EnterControl.Element.focus();\n                this.EnterControl.Element.click();\n            }\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Index } = ns.controls\n    const { HtmlTag } = ns.utils\n\n    ns.controls.Button = class Button extends Index {\n        constructor(options) {\n            super(options)\n\n            this.Width = this.Width || 60\n        }\n\n        GetHtml() {\n            this.SetAttribute(\"value\", this.Action.Label)\n            this.Action.Title && this.SetAttribute(\"title\", this.Action.Title)\n            this.ClassName && this.SetAttribute(\"class\", this.ClassName)\n\n            let styleList = []\n            styleList.push(`width:${this.Width}px;`)\n            this.SetAttribute(\"style\", styleList.join(\"\"))\n\n            return this.GetInputHtml(\"button\")\n        }\n\n        EventLoad2() {\n            this.Action.EventNames.forEach((name) => { HtmlTag.BindEvent(this.Element, name, (e) => this.Action.Invoke(e, this)) })\n            if (this.Action.IsOkFocus) this.Element.focus()\n        }\n    }\n\n    ns.controls.LinkButton = class LinkButton extends Index {\n        constructor(options) {\n            super(options)\n\n            this.Label = this.Label || this.Action.Label\n        }\n\n        GetHtml() {\n            return `<div style=\\\"text-align:center;\\\"><a href=\"javascript:void(0);\" id=${this.Id}>${this.Label}</a></div>`\n        }\n\n        EventLoad2() {\n            this.Action.EventNames.forEach((name) => { HtmlTag.BindEvent(this.Element, name, (e) => this.Action.Invoke(e, this)) })\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Index, Button } = ns.controls\n    const { Common, HtmlTag } = ns.utils\n\n    ns.controls.GridView = class GridView extends Index {\n        constructor(options) {\n            super(options)\n\n            this.Styles = this.Styles || { DivAddRight: \"DivAddRight\" }\n            this.Entity.Label = this.Entity.Label || this.Entity.Name\n            if (this.ControlWidth) this.Width = this.ControlWidth\n            this.Init()\n        }\n\n        Init() {\n            this.Entity.ExpandPageInit && this.Entity.ExpandPageInit.call(this, ns)\n            this.Entity.Properties.forEach((p) => this.InitProperty(p))\n\n            this.DataProperties = this.Entity.Properties.filter((p) => p.IsData).map((p) => Object.assign({}, p, p.DataOptions))\n            this.GridViewLayout = new ns.layouts.GridView(this.GetGridViewComponents())\n\n            this.AddButton = new Button({ Action: new ns.actions.GridViewAddAction(this) })\n\n            this.Height += 30\n        }\n\n        GetRowClassName() { return \"DivRowGridView\" }\n\n        InitProperty(p) {\n            Common.InitValue(p, [\"IsData\"], p.DataOptions !== undefined)\n            Common.InitValue(p, [\"IsEdit\"], p.EditOptions !== undefined)\n        }\n\n        GetHtml() {\n            let html = []\n\n            let addHtml = this.AddButton.GetHtml()\n            html.push(`<div class=\"${this.Styles.DivAddRight}\">${addHtml}</div>`)\n            html.push(this.GridViewLayout.GetHtml())\n\n            return html.join(\"\")\n        }\n\n        SaveData(d) { this.DataGridComponent.SaveData(d) }\n\n        GetGridViewComponents() {\n            this.DataGridComponent = new ns.components.DataGrid({ Entity: this.Entity, IsLocalData: true, Height: this.Height, Properties: this.DataProperties, IsFixedWidth: true })\n            return { DataGridComponent: this.DataGridComponent }\n        }\n\n        GetValue() {\n            return this.DataGridComponent.GetValue()\n        }\n\n        SetValue(value) {\n            this.DataGridComponent.SetValue(value)\n        }\n\n        EventLoad2() {\n            this.DataGridComponent.EventLoad()\n            this.AddButton.EventLoad()\n        }\n\n        DataLoad2() {\n            this.DataGridComponent.DataLoad()\n            this.AddButton.DataLoad()\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Index } = ns.controls\n    const { Common, HtmlTag } = ns.utils\n\n    ns.controls.DownList = class DownList extends Index {\n        constructor(options) {\n            super(options)\n\n            if (this.ControlWidth) this.Width = this.ControlWidth\n            this.Width = this.Width || 200\n            Common.InitValue(this, [\"IsEmpty\"], true)\n\n            this.ClassName = this.ClassName || \"DownList\"\n        }\n\n        GetHtml() {\n            this.SetAttribute(\"name\", this.Name)\n            this.ClassName && this.SetAttribute(\"class\", this.ClassName)\n\n            let styleList = []\n            styleList.push(`width:${this.Width + 3}px;`)\n            styleList.length > 0 && this.SetAttribute(\"style\", styleList.join(\"\"))\n\n            let html = []\n\n            html.push(`<select id=\"${this.Id}\"`)\n\n            html.push(this.GetAttributeHtml())\n\n            html.push(\">\")\n            html.push(this.GetOptionsHtml())\n            html.push(\"<select>\")\n\n            return html.join(\"\")\n        }\n\n        GetOptionsHtml() {\n            let html = []\n            this.IsEmpty && html.push(\"<option></option>\")\n            if (this.Options && this.Options.length > 0) {\n                let v, t\n                this.Options.forEach(p => {\n                    if (p.Value != undefined && p.Text != undefined) {\n                        v = p.Value\n                        t = p.Text\n                    }\n                    else {\n                        v = p\n                        t = p\n                    }\n                    html.push(`<option value=\"${v}\">${t}</option>`)\n                })\n            }\n            else {\n                !this.IsEmpty && html.push(\"<option></option>\")\n            }\n\n            return html.join(\"\")\n        }\n\n        LoadOptionHtml() {\n            let html = []\n            const { TextName, ValueName } = this.DataSource;\n            this.IsEmpty && html.push(\"<option></option>\")\n            if (this.DataList && this.DataList.length > 0) {\n                let v, t, s\n                this.DataList.forEach(d => {\n                    v = d[ValueName], t = d[TextName];\n                    s = Common.IsEquals(v, this.Value) ? \" selected=\\\"selected\\\"\" : \"\";\n                    html.push(`<option value=\"${v}\"${s}>${t}</option>`)\n                })\n            }\n            else {\n                !this.IsEmpty && html.push(\"<option></option>\")\n            }\n\n            HtmlTag.SetHtml(this.Element, html.join(\"\"));\n        }\n\n        DataLoad2() {\n            this.DataSource && this.GetDataList();\n            if (this.DataSource) {\n                HtmlTag.SetHtml(this.Element, \"<option>数据源加载中……</option>\");\n                this.GetDataList().then(() => this.LoadOptionHtml())\n            }\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Index } = ns.controls\n    const { Common, HtmlTag } = ns.utils\n\n    ns.controls.TextArea = class TextArea extends Index {\n        constructor(options) {\n            super(options)\n\n            if (this.ControlWidth) this.Width = this.ControlWidth\n            this.Width = this.Width || 200\n\n            this.ClassName = this.ClassName || \"TextArea\"\n        }\n\n        GetHtml() {\n            this.SetAttribute(\"name\", this.Name)\n            this.ClassName && this.SetAttribute(\"class\", this.ClassName)\n\n            let styleList = []\n            styleList.push(`width:${this.Width}px;`)\n            let height = this.Height - 8\n            styleList.push(`height:${height}px;`)\n            styleList.length > 0 && this.SetAttribute(\"style\", styleList.join(\"\"))\n\n            let html = []\n\n            html.push(`<textarea  cols=\"100\" rows=\"100\"\" id=\"${this.Id}\"`)\n\n            html.push(this.GetAttributeHtml())\n\n            html.push(\">\")\n            html.push(\"</textarea>\")\n\n            return html.join(\"\")\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { TextBox } = ns.controls\n    const { Common, HtmlTag } = ns.utils\n\n    ns.controls.TextSelect = class TextSelect extends TextBox {\n        constructor(options) {\n            super(options)\n\n            this.DataList = this.DataList || [];\n            this.SelectDataList = [];\n            this.ValueName = this.ValueName || \"Value\";\n            this.TextName = this.TextName || \"Text\";\n            this.SelectValue = \"\";\n            this.SelectText = \"\";\n            this.MaxItemLength = 100;\n        }\n\n        EventLoad3() {\n            HtmlTag.BindEvent(this.Element, \"click\", (e) => { this.LoadSelect(e) });\n            HtmlTag.BindEvent(this.Element, \"change\", (e) => { this.InputChange(e) });\n            HtmlTag.BindEvent(this.Element, \"keydown\", (e) => { this.SearchByKeyword(e) });\n            HtmlTag.BindEvent(this.Element, \"keypress\", (e) => { this.SearchByKeyword(e) });\n        }\n\n        SearchByKeyword(e) {\n            if (this.TimeoutId) window.clearInterval(this.TimeoutId);\n            this.TimeoutId = window.setTimeout(() => this.BandKeywordData(), 150);\n        }\n\n        BandKeywordData() {\n            this.SelectDataList = this.SearchData();\n            this.SetSelectOffSet();\n            const { Width, Height } = this.SelectOffSet;\n\n            HtmlTag.SetStyle(this.SelectTag, { width: Width + \"px\", height: Height + \"px\" });\n            HtmlTag.SetHtml(this.ContentTag, this.GetItemHtml(this.SelectDataList));\n\n            this.BindSelectEvents();\n        }\n\n        InputChange(e) {\n            var value = Common.Trim(e.target.value);\n            if (!Common.IsEquals(value, this.SelectText)) {\n                this.SelectValue = \"\";\n                this.SelectText = \"\";\n                e.target.value = \"\";\n            }\n        }\n\n        LoadSelect() {\n            if (this.DataList.length == 0) {\n                return;\n            }\n\n            let offSet = HtmlTag.GetOffSet(this.Element);\n            this.SelectOffSet = {\n                Top: offSet.top + offSet.height + 1,\n                Left: offSet.left + 1\n            }\n\n            HtmlTag.AppendHtml(document.body, this.GetSelectHtml());\n\n            this.SelectEventLoad();\n        }\n\n        SetSelectOffSet() {\n            var width = this.GetDataMaxWidth(this.SelectDataList) + 20;\n            width = width > this.Width + 2 ? width : this.Width + 2;\n\n            let height = this.SelectDataList.length * 30;\n            height = height > 300 ? 300 : height;\n\n            this.SelectOffSet.Width = width;\n            this.SelectOffSet.Height = height;\n        }\n\n        GetSelectHtml() {\n            this.SelectDataList = this.SearchData();\n            this.SetSelectOffSet();\n\n            const { Top, Left, Width, Height } = this.SelectOffSet;\n            let zIndex = Common.GetZIndex();\n\n            var html = [];\n\n            html.push(`<div class=\"TextSelect\" style=\"z-index:${zIndex};top:${Top}px;left:${Left}px;width:${Width}px;height:${Height}px;\" id=\"divSelect_${this.Id}\">`);\n            html.push(`<div class=\"SelectArea\" id=\"divContent_${this.Id}\">`);\n            html.push(this.GetItemHtml(this.SelectDataList));\n            html.push(\"</div></div>\");\n\n            return html.join(\"\");\n        }\n\n        GetItemHtml(dataList) {\n            var html = [], value = \"\", text = \"\";;\n\n            html.push(\"<ul>\");\n            dataList.forEach(item => {\n                item.Id = Common.CreateGuid();\n                value = item[this.ValueName];\n                text = item[this.TextName];\n                if (!Common.IsNullOrEmpty(value) && !Common.IsNullOrEmpty(text)) {\n                    html.push(`<li><a class=\"DivRadiusBorder\" id=${item.Id} href=\"javascript:void(0);\">${text}</a></li>`);\n                }\n            });\n            html.push(\"</ul>\");\n\n            return html.join(\"\");\n        }\n\n        GetDataMaxWidth(dataList) {\n            var width = 0, w = 0, t = null;\n            dataList.forEach(d => {\n                t = d[this.TextName]\n                if (t) {\n                    w = Common.ComputeStringWidth(t)\n                    width = w > width ? w : width;\n                }\n            });\n            return width;\n        }\n\n        SearchData() {\n            let term = HtmlTag.GetValue(this.Element);\n\n            let dataList = [], iCount = 0;\n            if (!term) {\n                iCount = this.DataList.length > this.MaxItemLength ? this.MaxItemLength : this.DataList.length;\n                for (let i = 0; i < iCount; i++) {\n                    dataList.push(this.DataList[i]);\n                }\n            }\n            else {\n                let value = \"\", text = \"\";\n                this.DataList.forEach(d => {\n                    value = d[this.ValueName]; text = d[this.TextName];\n                    if (value && text && text.indexOf(term) >= 0) dataList.push(d);\n                });\n            }\n\n            return dataList;\n        }\n\n        SelectEventLoad() {\n            this.SelectTag = HtmlTag.GetById(\"divSelect_\" + this.Id);\n            this.ContentTag = HtmlTag.GetById(\"divContent_\" + this.Id);\n\n            HtmlTag.OffBindEvent(document.body, \"click.TextSelect\");\n            HtmlTag.BindEvent(document.body, \"click.TextSelect\", (e) => {\n                const { Top, Left, Width, Height } = this.SelectOffSet;\n                var x = e.pageX, y = e.pageY;\n                var blExists = true;\n                if (x < Left || x > Left + Width) {\n                    blExists = false;\n                }\n                else if (y < Top - 35 || y > Top + Height) {\n                    blExists = false;\n                }\n                if (!blExists) {\n                    console.log(true)\n                    this.Destory();\n                }\n                console.log(blExists)\n            });\n\n            this.BindSelectEvents();\n        }\n\n        BindSelectEvents() {\n            this.SelectDataList.forEach(d => {\n                HtmlTag.BindEvent(HtmlTag.GetById(d.Id), \"click\", (e) => {\n                    this.SetSelectItem(e.target.id);\n                });\n            })\n        }\n\n        SetSelectItem(id) {\n            let list = this.SelectDataList.filter(f => f.Id === id)\n            if (list.length === 1) {\n                this.SelectText = list[0][this.TextName];\n                this.SelectValue = list[0][this.ValueName];\n                HtmlTag.SetValue(this.Element, this.SelectText);\n                this.Destory();\n            }\n        }\n\n        GetValue() {\n            return this.SelectValue || \"\";\n        }\n\n        SetValue(value) {\n            this.SelectValue = value;\n            let list = this.DataList.filter(f => Common.IsEquals(f[this.ValueName], value))\n            if (list.length === 1) {\n                this.SelectText = list[0][this.TextName];\n                HtmlTag.SetValue(this.Element, this.SelectText);\n            }\n        }\n\n        DataLoad3() {\n            if (this.DataSource) {\n                this.Element.placeholder = \"数据源加载中……\"\n                this.GetDataList().then(() => {\n                    this.Element.placeholder = \"\";\n                    if (!this.SelectText && this.SelectValue) this.SetValue(this.SelectValue);\n                })\n            }\n        }\n\n        Destory() {\n            console.log(this.SelectTag.id)\n            HtmlTag.RemoveElement(document.body, this.SelectTag);\n            HtmlTag.OffBindEvent(document.body, \"click.TextSelect\");\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Common, HtmlTag } = ns.utils\n\n    ns.components.ExcelImport = class ExcelImport {\n        constructor(options) {\n            this.Id = Common.CreateGuid()\n\n            options && Object.assign(this, options)\n        }\n\n        Import() {\n            if (window.FileReader) {\n                this.ExcelImportForFileReader()\n            }\n            else {\n                Common.Alert(\"对不起，浏览器不支持Excel导入方式，请使用Chrome或IE8及以上浏览器！\")\n            }\n        }\n\n        ExcelImportForFileReader() {\n            this.ExcelImportDialog = new ns.components.Dialog({\n                Width: 600,\n                Height: 100,\n                Html: this.GetHtml(),\n                Title: \"Excel导入\",\n                OkLabel: \"导入\",\n                OkAction: {\n                    Invoke: (e, c) => { this.ExecExcelImport(c) }\n                }\n            })\n\n            this.ExcelImportDialog.Show()\n        }\n\n        ExecExcelImport(c) {\n            let fileInput = HtmlTag.GetById(\"file_\" + this.Id)\n\n            var files = fileInput.files\n            if (files.length == 0) {\n                Common.Alert(\"对不起，请选择Excel导入文件！\")\n                return\n            }\n            var file = files[0]\n            var ft = \"\"\n\n            if (file.type == \"application/vnd.ms-excel\") {\n                ft = \".xls\"\n            }\n            else if (file.type == \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\") {\n                ft = \".xlsx\"\n            }\n            if (ft == \"\") {\n                Common.Alert(\"对不起，只能导入Excel文件！\")\n                return\n            }\n            if (file.size > 1024 * 1024) {\n                Common.Alert(\"对不起，Excel文件大小不能大于1M\")\n                return\n            }\n\n            c.SetDisabled(true)\n            this.SendFileRequest(file, ft, c)\n        }\n\n        GetHtml() {\n            var html = [];\n            html.push(\"<div class=\\\"DivText\\\"><dl><dt><span>Excel文件：</span></dt>\")\n            html.push(\"<dd><input type=\\\"file\\\" id=\\\"file_\" + this.Id + \"\\\"\")\n            html.push(\" accept=\\\"application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\\\" style=\\\"width:500px;\\\" class=\\\"TextBox\\\"></dd>\")\n            html.push(\"</dl></div>\");\n            return html.join(\"\")\n        }\n\n        SendFileRequest(file, ft, c) {\n            var url = \"ExcelImportHandler.ashx?EntityName=\" + this.Entity.Name + \"&ft=\" + ft\n\n            var fr = new FileReader()\n\n            fr.onloadend = () => {\n                this.Api.PostStreamFetch(url, fr.result).then(res => {\n                    c.SetDisabled(false)\n\n                    if (res.MessageList && res.MessageList.length > 0) {\n                        this.ShowMessageList(res)\n                        if (res.Message && res.Message.indexOf(\"操作成功\") === 0) {\n                            this.SearchAction.ExcelRefresh()\n                            this.ExcelImportDialog.Close()\n                        }\n                    }\n                    else if (res.Message) {\n                        Common.Alert(unescape(res.Message)).then(() => {\n                            if (res.Message.indexOf(\"操作成功\") === 0) {\n                                this.SearchAction.ExcelRefresh()\n                                this.ExcelImportDialog.Close()\n                            }\n                        })\n                    }\n\n                }, res => {\n                    c.SetDisabled(false)\n                    const msg = res && res.message ? res.message : res\n                    Common.Alert(msg)\n                })\n            }\n\n            fr.readAsArrayBuffer(file)\n        }\n\n        ShowMessageList(data) {\n            var html = []\n            var colName = \"错误提示\"\n            html.push(\"<div class=\\\"DivList\\\">\")\n            if (!Common.IsNullOrEmpty(data.Message)) {\n                html.push(`<div class=\"DivText\"><span>${data.Message}</span></div>`)\n                if (data.Message.indexOf(\"操作成功\") == 0) {\n                    colName = \"信息\"\n                }\n            }\n            html.push(\"<div class=\\\"DivData\\\"><div class=\\\"DivGridView\\\">\")\n            html.push(\"<table cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" border=\\\"0\\\">\")\n            html.push(`<thead><tr><td width=\\\"40\\\">行号</td><td width=\\\"800\\\">${colName}</td></tr></thead>`)\n            html.push(\"<tbody>\")\n            data.MessageList.forEach(item => {\n                html.push(\"<tr>\")\n                html.push(`<td>${item.RowNum}</td>`)\n                html.push(`<td>${item.Message}</td>`)\n                html.push(\"</tr>\")\n            })\n            html.push(\"</tbody></table></div></div></div>\")\n\n            this.ExcelMessageDialog = new ns.components.Dialog({\n                Width: 850,\n                Height: 500,\n                Html: html.join(\"\"),\n                Title: \"Excel导入提示信息\",\n                IsOkButton: false\n            })\n\n            this.ExcelMessageDialog.Show()\n        }\n    }\n\n})($ns);\n\n((ns) => {\n    const { Index } = ns.components\n    const { SpanLabel, LinkButton } = ns.controls\n    const { ChangePasswordAction } = ns.actions\n\n    ns.components.Login = class Login extends Index {\n        constructor(options) {\n            super(options)\n\n            this.Init()\n        }\n\n        Init() {\n            const { LoginUser } = this.Page\n\n            let loginInfo = `${LoginUser.LoginName}，欢迎您`\n            if (LoginUser.LastLoginDate) {\n                loginInfo = `${loginInfo}，上一次登录时间：${LoginUser.LastLoginDate}`\n            }\n            else {\n                loginInfo = `${loginInfo}，第一次登录系统`\n            }\n\n            this.ControlList = []\n            this.ControlList.push(new SpanLabel({ IsWidth: false, IsColon: false, Label: loginInfo }))\n            this.ControlList.push(new LinkButton({ Action: new ChangePasswordAction(this.Page) }))\n        }\n\n        GetHtml() {\n            let html = []\n\n            html.push(`<div class=\"DivLogin\"><ul>`)\n            html = html.concat(this.ControlList.map((c) => \"<li>\" + c.GetHtml() + \"</li>\"))\n            let loginName = escape(\"登录\")\n            html.push(`<li><div style=\\\"text-align:center;\\\"><a href=\"Index.aspx?page=${loginName}\">退出</a></div></li>`)\n            html.push(\"</ul></div>\")\n\n            return html.join(\"\")\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Index } = ns.components\n    const { Common, HtmlTag } = ns.utils\n\n    ns.components.Menu = class Menu extends Index {\n        constructor(options) {\n            super(options)\n        }\n\n        GetHtml() {\n            let html = []\n\n            html.push(`<div class=\"DivMenu\" id=${this.Id}>`)\n            html.push(`<div class=\"DivMenu1\">`)\n            html.push(\"</div>\")\n            html.push(`<div class=\"DivMenu2\">`)\n            html.push(\"</div>\")\n            html.push(\"</div>\")\n\n            return html.join(\"\")\n        }\n\n        InitTagObject() {\n            this.MenuTag = HtmlTag.GetById(this.Id)\n        }\n\n        DataLoad2() {\n            this.GetFirstMenuList().then(() => {\n                this.GetPageMenuList().then(() => {\n                    this.GetAdminMenu().then(() => {\n                        this.SetMenuList()\n                    })\n                })\n            })\n        }\n\n        GetFirstMenuList() {\n            return this.GetKeyValueList(\"菜单\", \"=\", \"菜单\").then(res => {\n                this.FirstMenuList = []\n                if (res != null) {\n                    let data = Common.ArrayFirst(res)\n                    if (data) {\n                        this.FirstMenuList = Common.Split(data[\"值\"], [\"，\", \",\"]).map(m => { return { Name: m } })\n                    }\n                }\n                return Promise.resolve()\n            })\n        }\n\n        GetKeyValueList(cacheName, logic, value) {\n            return ns.data.Cache.GetDataList(cacheName, \"键值配置\", [\"键名\", \"值\"], [{ Name: \"键名\", Logic: logic, Value: value }])\n        }\n\n        GetAdminMenu() {\n            let value = \"管理员，管理员菜单\"\n\n            return this.GetKeyValueList(\"管理员菜单\", \"in\", value).then(res => {\n                this.AdminUserList = []\n                this.AdminMenuList = []\n                if (res != null) {\n                    res.forEach(item => {\n                        if (item[\"键名\"] === \"管理员\") this.AdminUserList = Common.Split(item[\"值\"], [\"，\", \",\"])\n                        if (item[\"键名\"] === \"管理员菜单\") this.AdminMenuList = Common.Split(item[\"值\"], [\"，\", \",\"])\n                    })\n                    if (this.Page.LoginUser) {\n                        let list = this.AdminUserList.filter(f => Common.IsEquals(f, this.Page.LoginUser.LoginName))\n                        this.IsAdmin = list.length === 1\n                    }\n                }\n                return Promise.resolve()\n            })\n        }\n\n        GetPageMenuList() {\n            let value = this.FirstMenuList.map(m => `菜单-${m.Name}`)\n\n            return this.GetKeyValueList(\"页面菜单\", \"in\", value.join(\",\")).then(res => {\n                this.PageDataList = []\n                if (res != null) {\n                    res.forEach(item => {\n                        Common.Split(item[\"值\"], [\"，\", \",\"]).forEach(v => {\n                            this.PageDataList.push({ Name: v, MenuName: item[\"键名\"].replace(\"菜单-\", \"\") })\n                        })\n                    })\n                }\n                return Promise.resolve()\n            })\n        }\n\n        SetMenuList() {\n            this.MenuList = []\n\n            let firstMenuList = []\n            let list = null, selected2 = false, selected = false, name = \"\"\n\n            if (this.IsAdmin) {\n                firstMenuList = this.FirstMenuList\n            }\n            else {\n                this.FirstMenuList.forEach(m => {\n                    list = this.AdminMenuList.filter(f => Common.IsEquals(f, m.Name))\n                    list.length === 0 && firstMenuList.push(m)\n                })\n            }\n\n            firstMenuList.forEach(m => {\n                list = this.PageDataList.filter(f => f.MenuName === m.Name)\n                if (list && list.length > 0) {\n                    selected = false\n\n                    m.ChildMenuList = list.map(m2 => {\n                        name = m2.Name\n                        selected2 = this.Page.Name === name\n                        if (selected2) selected = true\n                        return {\n                            Name: name,\n                            Selected: selected2,\n                            Url: this.GetUrl(name)\n                        }\n                    })\n\n                    m.Selected = selected\n                    m.Id = Common.CreateGuid()\n\n                    this.MenuList.push(m)\n                }\n            })\n\n            this.LoadMenuHtml(firstMenuList)\n        }\n\n        LoadMenuHtml(firstMenuList) {\n            HtmlTag.SetHtml(this.MenuTag, this.GetMenuHtml())\n            firstMenuList.forEach(m => {\n                HtmlTag.BindEvent(HtmlTag.GetById(m.Id), \"click\", () => {\n                    firstMenuList.forEach(m2 => {\n                        m2.Selected = m.Id === m2.Id\n                    })\n                    this.LoadMenuHtml(firstMenuList)\n                })\n            })\n        }\n\n        GetUrl(pageName) {\n            return \"Index.aspx?page=\" + escape(pageName)\n        }\n\n        GetMenuHtml() {\n            let html = []\n\n            html.push(`<div class=\"DivMenu1\"><div class=\"DivMenuRight\">`)\n\n            let menu = null\n            this.MenuList.forEach(m => {\n                if (m.Selected) {\n                    html.push(`<p>${m.Name}</p>`)\n                    menu = m\n                }\n                else {\n                    html.push(`<a href=\"javascript:void(0);\" id=${m.Id}>${m.Name}</a>`)\n                }\n            })\n\n            html.push(\"</div></div>\")\n            html.push(`<div class=\"DivMenu2\"><ul>`)\n\n            let className = \"\"\n            if (menu && menu.ChildMenuList.length > 0) {\n                menu.ChildMenuList.forEach(m => {\n                    if (m.Selected) className = \" class=\\\"Active\\\"\"\n                    else className = \"\"\n                    html.push(`<li><a href=\"${m.Url}\"${className}>${m.Name}</a></li>`)\n                })\n            }\n\n            html.push(\"</ul></div>\")\n\n            return html.join(\"\")\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Common } = ns.utils\n    const { GetStateValue } = ns.data.Index\n\n    ns.components.Index = class Index {\n        constructor(options) {\n            this.Id = Common.CreateGuid()\n\n            options && Object.assign(this, options)\n        }\n\n        GetHtml() { return \"\" }\n\n        InitTagObject() { }\n\n        EventLoad2() { }\n        DataLoad2() { }\n\n        EventLoad() {\n            this.InitTagObject()\n            this.ComponentList && this.ComponentList.forEach((c) => c.EventLoad())\n            this.ControlList && this.ControlList.forEach((c) => c.EventLoad())\n            this.EventLoad2()\n        }\n\n        DataLoad() {\n            this.ComponentList && this.ComponentList.forEach((c) => c.DataLoad())\n            this.ControlList && this.ControlList.forEach((c) => c.DataLoad())\n            this.DataLoad2()\n        }\n\n        GetDataValue(state, name) {\n            return GetStateValue(state, this.KeyName, name, this[name]).then((v) => {\n                if (v != null) { this[name] = v }\n                return Promise.resolve(v != null)\n            })\n        }\n\n        IsFailMessage(res) {\n            if (res.ActionFailedMessage) {\n                Common.Alert(res.ActionFailedMessage)\n                return true\n            }\n            return false\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Index } = ns.components\n    const { Button } = ns.controls\n\n    ns.components.Buttons = class Buttons extends Index {\n        constructor(options) {\n            super(options)\n\n            this.Actions = this.Actions || []\n\n            this.ControlList = this.Actions.map((a) => new Button({ Action: a, Width: a.Width }))\n\n            this.Styles = this.Styles || { UlButton: \"UlButton\" }\n        }\n\n        GetHtml() {\n            let html = []\n\n            html.push(`<ul cass=\"UlButton\">`)\n            html = html.concat(this.ControlList.map((c) => \"<li>\" + c.GetHtml() + \"</li>\"))\n            html.push(\"</ul>\")\n\n            return html.join(\"\")\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Index } = ns.components\n    const { SpanLabel, TextBox, GridView, DownList, TextArea, TextSelect } = ns.controls\n    const { Common } = ns.utils\n\n    ns.components.PropertyItem = class PropertyItem extends Index {\n        constructor(options) {\n            super(options)\n\n            this.InitControls()\n\n            this.IsPassword = this.Property.ControlType === \"Password\"\n        }\n\n        InitControls() {\n            this.ControlList = []\n            this.ControlList.push(new SpanLabel(this.Property))\n            this.ControlList.push(this.GetControl())\n        }\n\n        GetControl() {\n            switch (this.Property.ControlType) {\n                case \"GridView\": return new GridView(this.Property)\n                case \"DownList\": return new DownList(this.Property)\n                case \"TextArea\": return new TextArea(this.Property)\n                case \"TextSelect\": return new TextSelect(Object.assign({ EnterControl: this.EnterControl }, this.Property))\n                default: return new TextBox(Object.assign({ EnterControl: this.EnterControl }, this.Property))\n            }\n        }\n\n        GetRowClassName() {\n            return this.ControlList[1].GetRowClassName()\n        }\n\n        GetHtml() {\n            let html = []\n            let c = null\n            let width = 0, height = 0\n\n            html.push(\"<dl>\")\n\n            c = this.ControlList[0]\n            html.push(\"<dt>\" + c.GetHtml() + \"</dt>\")\n            width += c.Width\n            height = c.Height\n\n            c = this.ControlList[1]\n            html.push(\"<dd>\" + c.GetHtml() + \"</dd>\")\n            width += c.Width + 10\n            height = c.Height > height ? c.Height : height\n\n            this.Width = width\n            this.Height = height\n\n            html.push(\"</dl>\")\n\n            return html.join(\"\")\n        }\n\n        GetValue() {\n            return this.ControlList[1].GetValue()\n        }\n\n        Validate(value) {\n            const { IsNullable, Label, MaxLength } = this.Property\n            let message = \"\", blSucceed = true\n\n            if (IsNullable === false && Common.IsNullOrEmpty(value)) {\n                message = Label + \"不能为空！\"\n                blSucceed = false\n            }\n\n            if (blSucceed && MaxLength > 0 && value && value.length > MaxLength) {\n                message = Label + \"字符长度超过\" + MaxLength + \"个！\"\n                blSucceed = false\n            }\n\n            if (!blSucceed) Common.Alert(message)\n            return blSucceed\n        }\n\n        SetValue(value) {\n            this.ControlList[1].SetValue(value)\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Index } = ns.components\n    const { DataSpan, LinkButton } = ns.controls\n    const { HtmlTag } = ns.utils\n\n    ns.components.DataItem = class DataItem extends Index {\n        constructor(options) {\n            super(options)\n\n            this.BorderColor = this.BorderColor || \"#a6c9e2\"\n            this.InitControls()\n        }\n\n        InitControls() {\n            this.ControlList = []\n            if (this.Data) {\n                this.ControlList = this.Properties.map((p) => this.GetControl(p))\n            }\n        }\n\n        GetControl(p) {\n            switch (p.ControlType) {\n                case \"LinkButton\": return new LinkButton(Object.assign({ RowData: this.Data }, p))\n                default: return new DataSpan(Object.assign({ Value: this.Data[p.Name] }, p))\n            }\n        }\n\n        InitTagObject() {\n            this.TrTag = HtmlTag.GetById(this.Id)\n        }\n\n        EventLoad2() {\n            HtmlTag.BindEvent(this.TrTag, \"click\", e => this.ClickRow(e))\n        }\n\n        DataLoad2() {\n            if (this.Data && this.SelectIdList && this.SelectIdList.length > 0) {\n                let id = this.Data[this.PrimaryKey]\n                let list = this.SelectIdList.filter(f => f === id)\n                if (list && list.length > 0) this.SetSelectRow()\n            }\n        }\n\n        ClickRow() {\n            if (this.TrTag.Selected) return\n            this.TrTag.parentNode.childNodes.forEach(n => {\n                n.Selected = false\n                HtmlTag.RemoveClass(n, \"SelectTr\")\n            })\n            this.SetSelectRow()\n        }\n\n        SetSelectRow() {\n            HtmlTag.AddClass(this.TrTag, \"SelectTr\")\n            this.TrTag.Selected = true\n        }\n\n        GetValue() {\n            return this.Data\n        }\n\n        GetHtml() {\n            let html = []\n\n            html.push(`<tr id=${this.Id} style=\"border-bottom:1px solid ${this.BorderColor}\">`)\n\n            let borderStyle = \"\", widthStyle = \"\"\n            this.ControlList.forEach((c, i) => {\n                widthStyle = this.RowIndex === 0 ? `width:${c.ColumnWidth}px;` : \"\"\n                borderStyle = i > 0 ? borderStyle = `border-left:1px solid ${this.BorderColor};` : \"\"\n                html.push(`<td style=\"width:${c.ColumnWidth}px;${borderStyle}\">`)\n                html.push(c.GetHtml() + \"</td>\")\n            })\n\n            html.push(\"</tr>\")\n\n            return html.join(\"\")\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Index } = ns.components\n    const { DataSpan } = ns.controls\n    const { HtmlTag } = ns.utils\n\n    ns.components.GridHeader = class GridHeader extends Index {\n        constructor(options) {\n            super(options)\n\n            this.BorderColor = this.BorderColor || \"#a6c9e2\"\n            this.Styles = this.Styles || { DivHeader: \"DivHeader\" }\n\n            this.InitControls()\n        }\n\n        InitControls() {\n            this.ControlList = this.Properties.map((p) => new DataSpan(Object.assign({ Value: p.Label || p.Name, IsLabel: true }, p)))\n        }\n\n        InitTagObject() {\n            this.TableTag = HtmlTag.GetById(this.Id)\n        }\n\n        GetHtml() {\n            let html = []\n            const width = this.IsFixedWidth ? this.Width.toString() + \"px\" : \"100%\"\n\n            html.push(`<div class=\"${this.Styles.DivHeader}\">`)\n            html.push(`<table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"width:${width}\" id=\"${this.Id}\"><thead><tr>`)\n            let borderStyle = \"\"\n            this.ControlList.forEach((c, i) => {\n                borderStyle = i > 0 ? borderStyle = `border-left:1px solid ${this.BorderColor};` : \"\"\n                html.push(`<th style=\"width:${c.ColumnWidth}px;${borderStyle}\">`)\n                html.push(c.GetHtml() + \"</th>\")\n            })\n\n            html.push(\"</tr></thead></table></div>\")\n\n            return html.join(\"\")\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Index, GridHeader, DataItem } = ns.components\n    const { Connect } = ns.data.Index\n    const { Common, HtmlTag } = ns.utils\n    const { EditAction, DeleteAction } = ns.actions\n\n\n    ns.components.DataGrid = class DataGrid extends Index {\n        constructor(options) {\n            super(options)\n\n            this.Styles = this.Styles || { DivGrid: \"DivGrid\", DivGridContent: \"DivGridContent\" }\n\n            this.InitControls()\n        }\n\n        InitControls() {\n            this.DataList = []\n            this.GetDataActions()\n\n            this.Properties.forEach(p => {\n                if (!p.Action && p.ActionInvoke) { p.Action = new ns.actions.Index(this); p.Action.Invoke = p.ActionInvoke }\n            })\n            this.Properties = this.Properties.sort((a, b) => a.X > b.X ? 1 : -1);\n            this.Properties = this.Properties.concat(this.DataActions.map((a => { return { ColumnWidth: 60, Label: a.Label, ControlType: \"LinkButton\", Action: a } })))\n\n            this.ComputeWidth()\n\n            this.GridHeaderComponent = new GridHeader({ Properties: this.Properties, Width: this.Width, IsFixedWidth: this.IsFixedWidth })\n            this.ComponentList = [this.GridHeaderComponent]\n        }\n\n        ComputeWidth() {\n            this.Width = 0\n            let iCount = 0\n            this.Properties.forEach((p) => {\n                this.Width += p.ColumnWidth > 0 ? p.ColumnWidth : 0\n                iCount += p.ColumnWidth > 0 ? 0 : 1\n            })\n            this.GridWidth = 800\n\n            if (iCount > 0 && this.GridWidth > this.Width) {\n                this.ColumnWidth = Math.floor((this.GridWidth - this.Width - 10) / iCount)\n\n                this.Properties.forEach((p) => {\n                    p.ColumnWidth = p.ColumnWidth > 0 ? p.ColumnWidth : this.ColumnWidth\n                })\n            }\n        }\n\n        GetDataActions() {\n            this.DataActions = []\n\n            this.DataActions.push(new EditAction(this))\n            this.DataActions.push(new DeleteAction(this))\n\n            return this.DataActions\n        }\n\n        GetHtml() {\n            let html = []\n\n            const width = this.IsFixedWidth ? this.Width.toString() + \"px\" : \"100%\"\n\n            html.push(`<div class=\"${this.Styles.DivGrid}\">`)\n\n            html.push(this.ComponentList[0].GetHtml())\n\n            let style = \"\"\n            let styleList = []\n            this.Height > 0 && styleList.push(`height:${this.Height - 60}px;`)\n            if (styleList.length > 0) style = \" style=\\\"\" + styleList.join(\"\") + \"\\\"\"\n\n            html.push(`<div class=\"${this.Styles.DivGridContent}\"${style}>`)\n            html.push(`<table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"width:${width};\" id=\"${this.Id}\">`)\n            html.push(\"<tbody></tbody></table></div></div>\")\n\n            return html.join(\"\")\n        }\n\n        InitTagObject() {\n            this.TableTag = HtmlTag.GetById(this.Id)\n            this.TableTbodyTag = Common.ArrayFirst(HtmlTag.Find(this.TableTag, \"tbody\"))\n        }\n\n        EventLoad2() {\n            var divContent = this.TableTag.parentNode\n            var tableHeader = this.GridHeaderComponent.TableTag\n\n            HtmlTag.BindEvent(divContent, \"scroll\", (e) => {\n                if (tableHeader.CurrentLeft !== e.target.scrollLeft) {\n                    tableHeader.CurrentLeft = e.target.scrollLeft\n                    tableHeader.style.left = -e.target.scrollLeft + \"px\"\n                }\n            })\n        }\n\n        DataLoad() {\n            this.Properties.forEach((p) => {\n                ns.data.Cache.GetPropertyDataList(p)\n            })\n\n            Connect((state) => {\n                this.GetDataValue(state, \"QueryResponse\").then(res => {\n                    res && this.SetQueryResponse()\n                })\n            })\n        }\n\n        SaveData(d) {\n            let key = this.Entity.PrimaryKey\n            let list = this.DataList.filter(f => f[key] === d[key])\n            if (list && list.length === 1) {\n                list[0] = Object.assign(list[0], d)\n            }\n            else {\n                this.DataList.push(d)\n            }\n            this.BindData([d[key]])\n        }\n\n        DeleteData(id) {\n            let index = -1\n            let key = this.Entity.PrimaryKey\n            for (let i = 0; i < this.DataList.length; i++) {\n                if (this.DataList[i][key] === id) {\n                    index = i\n                    break\n                }\n            }\n            if (index >= 0) {\n                this.DataList.splice(index, 1)\n                this.BindData([])\n            }\n        }\n\n        GetValue() { return this.DataList }\n\n        SetValue(value) {\n            if (value && value.length > 0) this.DataList = value.map(m => m)\n            this.BindData([])\n        }\n\n        BindData(idList) {\n            this.RowCount = this.DataList.length\n            this.DataItemComponentList = this.DataList.map((d, i) => new DataItem({\n                RowIndex: i,\n                Properties: this.Properties,\n                Data: d,\n                PrimaryKey: this.Entity.PrimaryKey,\n                SelectIdList: idList\n            }))\n\n            let html = this.DataItemComponentList.map((c, i) => c.GetHtml())\n            HtmlTag.SetHtml(this.TableTbodyTag, html.join(\"\"))\n\n            this.DataItemComponentList.forEach((c) => {\n                c.EventLoad()\n                c.DataLoad()\n            })\n        }\n\n        SetQueryResponse() {\n            let res = this.QueryResponse\n            if (res == null) { return }\n\n            if (this.IsFailMessage(res)) { return }\n\n            if (res.DataList != null) {\n                let idList = res.Ids ? res.Ids.split(\",\") : []\n                this.DataList = res.DataList\n                this.BindData(idList)\n            }\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Index } = ns.components\n    const { Connect } = ns.data.Index\n    const { Button, SpanLabel, TextBox } = ns.controls\n    const { PagingIndexQueryAction } = ns.actions\n    const { Common, HtmlTag } = ns.utils\n\n    ns.components.DataPaging = class DataPaging extends Index {\n        constructor(options) {\n            super(options)\n\n            this.InitControls()\n\n            this.Styles = this.Styles || { DivPage: \"DivPage\" }\n        }\n\n        InitControls() {\n            let entityButton = new Button({ Action: new PagingIndexQueryAction(this), Width: 50 })\n\n            this.ControlList = []\n            this.ControlList.push(this.GetPagingButton(\"PagingFirstAction\"))//0\n            this.ControlList.push(this.GetPagingButton(\"PagingPreAction\"))//1\n            this.ControlList.push(new SpanLabel({ Label: 1, IsColon: false, IsWidth: false, ClassName: \"SpanIndex\" }))//2\n            this.ControlList.push(this.GetPagingButton(\"PagingNextAction\"))//3\n            this.ControlList.push(this.GetPagingButton(\"PagingLastAction\"))//4\n            this.ControlList.push(new SpanLabel({ Label: \"到\", IsColon: false, IsWidth: false }))//5\n            this.ControlList.push(new TextBox({ Name: \"IndexCount\", MaxLength: 10, Width: 50, EnterControl: entityButton }))//6\n            this.ControlList.push(new SpanLabel({ Label: \"页\", IsColon: false, IsWidth: false }))//7\n            this.ControlList.push(entityButton)//8\n\n            this._ctls = {\n                First: this.ControlList[0],\n                Pre: this.ControlList[1],\n                Next: this.ControlList[3],\n                Last: this.ControlList[4],\n                IndexCount: this.ControlList[6],\n                IndexQuery: this.ControlList[8]\n            }\n        }\n\n        GetPagingButton(name) {\n            return new Button({ Action: new ns.actions[name](this), ClassName: \"Button\", Width: 35 })\n        }\n\n        GetHtml() {\n            let html = []\n            html.push(`<div class=\"${this.Styles.DivPage}\" style=\"display:none;\" id=\"${this.Id}\">`)\n            html.push(`<div class=\\\"DivLeft\\\"><span class=\"SpanRecord\" id=\"record_${this.Id}\"></span></div>`)\n            html.push(\"<div class=\\\"DivRight\\\"><ul>\")\n            html = html.concat(this.ControlList.map((c) => \"<li>\" + c.GetHtml() + \"</li>\"))\n            html.push(\"</ul></div></div>\")\n            return html.join(\"\")\n        }\n\n        InitTagObject() {\n            this.PageTag = HtmlTag.GetById(this.Id)\n            this.SpanRecord = HtmlTag.GetById(\"record_\" + this.Id)\n        }\n\n        DataLoad() {\n            Connect((state) => {\n                this.GetDataValue(state, \"QueryResponse\").then(res => {\n                    res && this.SetQueryResponse()\n                })\n            })\n        }\n\n        SetQueryResponse() {\n            let res = this.QueryResponse\n            if (res == null) { return }\n\n            if (this.IsFailMessage(res)) { return }\n\n            if (res.PageRecord >= 0) this.PageRecord = res.PageRecord\n\n            this.BindPage()\n        }\n\n        BindPage() {\n            this.PageIndex = this.SearchAction.PageIndex\n\n            if (this.PageRecord == 0) {\n                this.PageIndex = 1\n                this.PageCount = 0\n\n                HtmlTag.SetHide(this.PageTag)\n                return\n            }\n            if (this.PageRecord % this.PageSize == 0) {\n                this.PageCount = parseInt(this.PageRecord / this.PageSize)\n            }\n            else {\n                this.PageCount = parseInt(this.PageRecord / this.PageSize) + 1\n            }\n            this.PageIndex = this.PageIndex < 1 ? 1 : this.PageIndex\n            this.PageIndex = this.PageIndex > this.PageCount ? this.PageCount : this.PageIndex\n\n            //SpanIndex\n            this.ControlList[2].SetValue(this.PageIndex)\n\n            //SpanRecord\n            let startNum = (this.PageIndex - 1) * this.PageSize + 1\n            let endNum = this.PageIndex * this.PageSize\n            endNum = endNum > this.PageRecord ? this.PageRecord : endNum\n\n            let record = `${startNum} - ${endNum} 共 ${this.PageCount} 页 ${this.PageRecord} 条记录`\n            HtmlTag.SetHtml(this.SpanRecord, record)\n\n            this.SetPageControlDisabled()\n\n            HtmlTag.SetShow(this.PageTag)\n        }\n\n        SetPageControlDisabled() {\n            let ed = this.JudgePage()\n\n            ed.Enableds.forEach((e) => this._ctls[e].SetDisabled(false))\n            ed.Disbleds.forEach((e) => this._ctls[e].SetDisabled(true))\n        }\n\n        JudgePage() {\n            var ed = {}\n            if (this.PageCount <= 1) {\n                ed.Enableds = []\n                ed.Disbleds = [\"First\", \"Pre\", \"Next\", \"Last\", \"IndexCount\", \"IndexQuery\"]\n            }\n            else if (this.PageIndex == 1) {\n                ed.Enableds = [\"Next\", \"Last\", \"IndexCount\", \"IndexQuery\"]\n                ed.Disbleds = [\"First\", \"Pre\"]\n            }\n            else if (this.PageIndex == this.PageCount) {\n                ed.Enableds = [\"First\", \"Pre\", \"IndexCount\", \"IndexQuery\"]\n                ed.Disbleds = [\"Next\", \"Last\"]\n            }\n            else {\n                ed.Enableds = [\"First\", \"Pre\", \"Next\", \"Last\", \"IndexCount\", \"IndexQuery\"]\n                ed.Disbleds = []\n            }\n            return ed\n        }\n\n        GetInputPageIndex() {\n            //IndexCount\n            let indexCountHtmlTag = this.ControlList[6]\n            let indexCount = parseInt(indexCountHtmlTag.GetValue())\n            if (indexCount > 0 && indexCount <= this.PageCount) {\n                this.PageIndex = indexCount\n            }\n            else {\n                Common.Alert(\"对不起，请输入1至\" + this.PageCount + \"之间的自然数页索引！\").then(() => indexCountHtmlTag.Element.focus())\n                return false\n            }\n            indexCountHtmlTag.SetValue(\"\")\n\n            return this.PageIndex\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Index } = ns.components\n    const { Common, HtmlTag } = ns.utils\n    const { DialogOkAction, DialogCancelAction } = ns.actions\n    const { Buttons } = ns.components\n\n    ns.components.Dialog = class Dialog extends Index {\n        constructor(options) {\n            super(options)\n\n            this.Styles = this.Styles || { DialogBackground: \"DialogBackground\", DivDialog: \"DivDialog\" }\n            Common.InitValue(this, [\"IsClosed\", \"IsOkButton\"], true)\n            this.DialogKey = \"Dialog_\" + this.Id.substring(0, 8);\n        }\n\n        InitControls() {\n            this.Actions = this.Actions || this.GetActions()\n            this.ButtonsComponent = new Buttons({ Actions: this.Actions })\n            this.ComponentList = [this.ButtonsComponent]\n            this.Width += 50\n            this.Height += 100\n        }\n\n        GetActions() {\n            let actions = []\n            let okAction = new DialogOkAction(this)\n            if (this.OkLabel) okAction.Label = this.OkLabel\n            if (this.IsOkButton) actions.push(okAction)\n            if (this.IsClosed) actions.push(new DialogCancelAction(this))\n            return actions\n        }\n\n        GetHtml() {\n            let width = HtmlTag.GetWindowWidth(), height = HtmlTag.GetWindowHeight(), zIndex = Common.GetZIndex()\n\n            let html = []\n            html.push(`<div class=\"${this.Styles.DialogBackground}\" id=\"bg_${this.Id}\" style=\"z-index:${zIndex};\">`)\n            html.push(\"</div>\")\n\n            let top = Math.round(height / 2 - this.Height / 2 - 30), left = Math.round(width / 2 - this.Width / 2)\n            top = top < 10 ? 10 : top\n            left = left < 10 ? 10 : left\n            width = this.Width, height = this.Height, zIndex = Common.GetZIndex()\n\n            html.push(`<div class=\"DivRadiusBorder ${this.Styles.DivDialog}\" id=\"${this.Id}\"`)\n            html.push(` style=\"position:absolute;width:${width}px;height:${height}px;z-index:${zIndex};top:${top}px;left:${left}px;\">`)\n            html.push(this.GetHeaderHtml())\n\n            height = height - 80\n            html.push(`<div class=\"DivContent\" style=\"height:${height}px;\">${this.Html}</div>`)\n\n            html.push(this.GetButtonsHtml())\n\n            html.push(\"</div>\")\n\n            return html.join(\"\")\n        }\n\n        GetButtonsHtml() {\n            return \"<div class=\\\"DivButton\\\">\" + this.ButtonsComponent.GetHtml() + \"</div>\"\n        }\n\n        GetHeaderHtml() {\n            let html = []\n\n            html.push(`<div class=\"DivRadiusBorder DivTitleHeader\" id=\"header_${this.Id}\">`)\n            html.push(`<span class=\"SpanTitle\">${this.Title}</span>`)\n            this.IsClosed && html.push(\"<a href=\\\"javascript:void(0);\\\" id=\\\"close_\" + this.Id + \"\\\"><span class=\\\"ui-icon ui-icon-closethick\\\"></span></a>\")\n            html.push(\"</div>\")\n\n            return html.join(\"\")\n        }\n\n        Show() {\n            this.InitControls()\n\n            HtmlTag.AppendHtml(document.body, this.GetHtml())\n\n            this.DivBackground = HtmlTag.GetById(\"bg_\" + this.Id)\n            this.DivDialog = HtmlTag.GetById(this.Id)\n\n            this.IsClosed && HtmlTag.BindEvent(HtmlTag.GetById(\"close_\" + this.Id), \"click\", () => this.Close())\n\n            const header = HtmlTag.GetById(\"header_\" + this.Id)\n            HtmlTag.BindEvent(header, \"mousedown\", (e) => this.Down(e))\n            HtmlTag.OffBindEvent(window, \"mousemove.\" + this.DialogKey);\n            HtmlTag.BindEvent(window, \"mousemove.\" + this.DialogKey, (e) => this.Move(e))\n            HtmlTag.BindEvent(header, \"mouseup\", (e) => this.Up(e))\n\n            this.EventLoad()\n            this.DataLoad()\n        }\n\n        Down(e) {\n            this.IsStart = true\n            let offset = HtmlTag.GetOffSet(this.DivDialog)\n            this.StartX = e.pageX - offset.left\n            this.StartY = e.pageY - offset.top\n        }\n\n        Move(e) {\n            if (this.IsStart) {\n                this.IsMove = true\n\n                let width = HtmlTag.GetWindowWidth(), height = HtmlTag.GetWindowHeight()\n\n                let dx = e.pageX - this.StartX\n                let dy = e.pageY - this.StartY\n\n                dx = dx + this.Width > width - 20 ? width - this.Width - 20 : dx\n                dy = dy + this.Height > height - 20 ? height - this.Height - 20 : dy\n\n                dx = dx < 1 ? 1 : dx\n                dy = dy < 1 ? 1 : dy\n\n                HtmlTag.SetStyle(this.DivDialog, { left: dx + \"px\", top: dy + \"px\" })\n            }\n        }\n\n        Up(e) {\n            if (this.IsMove) { this.IsStart = false }\n        }\n\n        Close() {\n            HtmlTag.RemoveElement(document.body, this.DivDialog)\n            HtmlTag.RemoveElement(document.body, this.DivBackground)\n            HtmlTag.OffBindEvent(window, \"mousemove.\" + this.DialogKey);\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Common } = ns.utils\n\n    ns.components.AlertConfirm = class AlertConfirm {\n        constructor(options) {\n            this.Id = Common.CreateGuid()\n\n            options && Object.assign(this, options)\n\n            this.Init()\n        }\n\n        Init() {\n            this.Message = Common.IsNullOrEmpty(this.Message) ? \"\" : this.Message.toString()\n            this.Message = this.Message.replace(/</g, \"&lt;\")\n            this.Message = this.Message.replace(/>/g, \"&gt;\")\n\n            this.ImgDivClassName = this.IsConfirm ? \"DivConfirm\" : \"DivWarn\"\n\n            var width = 300\n            var height = 100\n\n            var width1 = this.Message.length * 15\n            if (width1 > 500) {\n                width = 500\n                height = 150\n            }\n            else if (width1 > width) {\n                width = width1\n            }\n\n            this.Width = width\n            this.Height = height\n        }\n\n        GetHtml() {\n            let html = []\n\n            html.push(\"<table class=\\\"Alert\\\" border=\\\"0\\\"cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tr align=\\\"left\\\">\")\n            html.push(`<td valign=\"top\" width=\"40px\"><div class=\"${this.ImgDivClassName}\"></div></td>`)\n            html.push(`<td valign=\"top\"><div class=\"Text\"><span>${this.Message}</span></div></td>`)\n            html.push(\"</tr></table>\")\n\n            return html.join(\"\")\n        }\n\n        ShowDialog(resolve) {\n            let dialog = new ns.components.Dialog({\n                Width: this.Width,\n                Height: this.Height,\n                Html: this.GetHtml(),\n                IsClosed: false,\n                OkAction: {\n                    Invoke: () => {\n                        dialog.Close()\n                        resolve()\n                    }\n                },\n                Title: this.IsConfirm ? \"确认信息\" : \"提示信息\"\n            })\n\n            let actions = [new ns.actions.DialogOkAction(dialog)]\n            actions[0].IsOkFocus = true\n\n            if (this.IsConfirm) {\n                dialog.IsClosed = true\n                actions.push(new ns.actions.DialogCancelAction(dialog))\n            }\n            dialog.Actions = actions\n\n            dialog.Show()\n        }\n\n        Show() {\n            return new Promise((resolve, reject) => {\n                this.ShowDialog(resolve)\n            })\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Common } = ns.utils\n\n    ns.layouts.Index = class Index {\n        constructor(options) {\n            this.Id = Common.CreateGuid()\n            this.ComponentList = []\n\n            options && Object.assign(this, options)\n        }\n\n        ExpandRowComponents() { }\n\n        GetRowList() {\n            let rowCount = 0\n            this.ComponentList.forEach(c => { if (c.Property.X > rowCount) rowCount = c.Property.X })\n            this.RowCount = rowCount\n\n            this.RowList = []\n            let row = null, list = null, className = null\n\n            for (let i = 0; i < rowCount; i++) {\n                list = this.ComponentList.filter(f => f.Property.X === i + 1)\n                list = list.sort((a, b) => a.Property.Y > b.Property.Y ? 1 : -1)\n                if (list.length > 0 && list[0].GetRowClassName) className = list[0].GetRowClassName()\n                row = { Components: list, ClassName: className }\n                this.ExpandRowComponents(row, i)\n\n                if (row.Components.length > 0) this.RowList.push(row)\n            }\n\n            return this.RowList\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Index } = ns.layouts\n\n    ns.layouts.Search = class Search extends Index {\n        constructor(options) {\n            super(options)\n\n            this.Styles = this.Styles || { DivSearch: \"DivSearch\", DivRow: \"DivRow\" }\n        }\n\n        GetHtml() {\n            this.GetRowList()\n\n            let html = []\n\n            html.push(`<div class=\"${this.Styles.DivSearch}\">`)\n\n            html = html.concat(this.RowList.map((r) => this.GetRowHtml(r)))\n\n            html.push(\"</div>\")\n\n            return html.join(\"\")\n        }\n\n        GetRowHtml(r) {\n            let html = []\n\n            html.push(`<div class=\"${this.Styles.DivRow}\"><ul>`)\n\n            html = html.concat(r.Components.map((c) => \"<li>\" + c.GetHtml() + \"</li>\"))\n\n            html.push(\"</ul></div>\")\n\n            return html.join(\"\")\n        }\n\n        ExpandRowComponents(row, i) {\n            if (i === this.RowCount - 1 && this.ButtonComponentList && this.ButtonComponentList.length > 0) {\n                row.Components = row.Components.concat(this.ButtonComponentList)\n            }\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Index } = ns.layouts\n\n    ns.layouts.GridView = class GridView extends Index {\n        constructor(options) {\n            super(options)\n\n            this.Styles = this.Styles || { DivGridView: \"DivGridView\" }\n        }\n\n        GetHtml() {\n            let html = []\n\n            html.push(`<div class=\"${this.Styles.DivGridView}\">`)\n\n            html.push(this.DataGridComponent.GetHtml())\n\n            if (this.DataPagingComponent) {\n                html.push(this.DataPagingComponent.GetHtml())\n            }\n            html.push(\"</div>\")\n\n            return html.join(\"\")\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Index } = ns.layouts\n\n    ns.layouts.EditLayout = class EditLayout extends Index {\n        constructor(options) {\n            super(options)\n\n            this.Styles = this.Styles || { DivEdit: \"DivEdit\", DivRow: \"DivRow\" }\n\n            this.Width = 0\n            this.Height = 0\n        }\n\n        GetHtml() {\n            this.GetRowList()\n\n            let html = []\n\n            html.push(`<div class=\"${this.Styles.DivEdit}\">`)\n            html = html.concat(this.RowList.map((r) => this.GetRowHtml(r)))\n            html.push(\"</div>\")\n\n            return html.join(\"\")\n        }\n\n        GetRowHtml(r) {\n            let html = []\n            let width = 0, height = 0\n\n            let className = r.ClassName ? r.ClassName : this.Styles.DivRow\n            html.push(`<div class=\"${className}\"><ul>`)\n\n            r.Components.forEach((c) => {\n                html.push(\"<li>\" + c.GetHtml() + \"</li>\")\n                width += c.Width\n                height = c.Height > height ? c.Height : height\n            })\n\n            this.Width = width > this.Width ? width : this.Width\n            this.Height += height\n\n            html.push(\"</ul></div>\")\n\n            return html.join(\"\")\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Index } = ns.layouts\n\n    ns.layouts.DataOperationLayout = class DataOperation extends Index {\n        constructor(options) {\n            super(options)\n\n            this.Styles = this.Styles || { DivOperation: \"DivOperation\" }\n        }\n\n        GetHtml() {\n            let html = []\n\n            html.push(`<div class=\"${this.Styles.DivOperation}\">`)\n\n            html.push(this.OpeartionComponent.GetHtml())\n\n            html.push(\"</div>\")\n\n            return html.join(\"\")\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Index } = ns.layouts\n\n    ns.layouts.MenuLayout = class MenuLayout extends Index {\n        constructor(options) {\n            super(options)\n\n            this.Styles = this.Styles || { DivLoginMenu: \"DivLoginMenu\" }\n        }\n\n        GetHtml() {\n            let html = []\n\n            html.push(`<div class=\"${this.Styles.DivLoginMenu}\">`)\n\n            html.push(this.LoginComponent.GetHtml())\n            html.push(this.MenuComponent.GetHtml())\n\n            html.push(\"</div>\")\n\n            return html.join(\"\")\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Common } = ns.utils\n    const { SearchAction, NewAddActions } = ns.actions\n\n    ns.pages.Index = class Index {\n        constructor(options) {\n            this.Id = Common.CreateGuid()\n            this.Entity = { Properties: [] }\n\n            options && Object.assign(this, options)\n\n            this.Styles = this.Styles || { HtmlPage: \"HtmlPage\" }\n\n            this.InitEntity();\n\n            this.Entity.Properties.forEach((p) => this.InitProperty(p))\n\n            this.KeyName = this.PageName + \"_\" + this.Entity.Id\n        }\n\n        Load() {\n            this.PageInit()\n            this.PageLoad()\n        }\n\n        PageInit() { }\n\n        InitEntity() {\n            this.Entity.Label = this.Entity.Label || this.Entity.Name\n            this.Entity.Id = this.Entity.Id || Common.CreateGuid();\n            Common.InitValue(this.Entity, [\"IsSelectKey\"], true)\n        }\n\n        InitProperty(p) {\n            Common.InitValue(p, [\"IsSearch\"], p.SearchOptions !== undefined)\n            Common.InitValue(p, [\"IsData\"], p.DataOptions !== undefined)\n            Common.InitValue(p, [\"IsEdit\"], p.EditOptions !== undefined)\n            p.Label = p.Label || p.Name\n        }\n\n        PageLoad() { }\n    }\n\n})($ns);\n((ns) => {\n    const { Common, HtmlTag } = ns.utils\n    const { Index } = ns.pages\n    const { Search, GridView, DataOperationLayout, MenuLayout } = ns.layouts\n    const { Buttons, PropertyItem, DataGrid, DataPaging } = ns.components\n    const { SearchAction, NewAddAction, ExcelExportAction, ExcelImportAction } = ns.actions\n\n    ns.pages.ListPage = class ListPage extends Index {\n        constructor(options) {\n            super(options)\n\n            this.Title = this.Title || this.Entity.Label + \"列表\"\n            document.title = this.Title\n\n            Common.InitValue(this, [\"IsPage\"], true)\n            this.PageSize = this.PageSize || 10\n        }\n\n        PageInit() {\n            this.QueryString = Common.GetQueryString()\n            this.LoginUser = { UserId: \"\", LoginName: \"admin\" }\n\n            ns.data.Index.InitListPageEntityState(this.KeyName)\n\n            this.Entity.ExpandPageInit && this.Entity.ExpandPageInit.call(this, ns)\n\n            this.SearchProperties = this.Entity.Properties.filter((p) => p.IsSearch).map((p) => Object.assign({}, p, p.SearchOptions))\n            this.DataProperties = this.Entity.Properties.filter((p) => p.IsData).map((p) => Object.assign({}, p, p.DataOptions))\n            this.SelectNames = this.DataProperties.map((p) => p.Name)\n\n            this.SerachLayout = new Search(this.GetSearchComponents())\n            this.GridViewLayout = new GridView(this.GetGridViewComponents())\n            this.DataOperationLayout = new DataOperationLayout(this.GetOperationComponents())\n\n            this.MenuLayout = new MenuLayout(this.GetMenuComponents())\n        }\n\n        GetMenuComponents() {\n            this.MenuComponent = new ns.components.Menu({ Page: this })\n            this.LoginComponent = new ns.components.Login({ Page: this })\n            return { MenuComponent: this.MenuComponent, LoginComponent: this.LoginComponent }\n        }\n\n        GetOperationComponents() {\n            const { IsExcelExport, IsExcelImport } = this\n            this.OpeartionActions = []\n\n            IsExcelExport !== false && this.OpeartionActions.push(new ExcelExportAction(this))\n            IsExcelExport !== false && this.OpeartionActions.push(new ExcelImportAction(this))\n            this.OperationButtonsComponent = new Buttons({ Actions: this.OpeartionActions })\n\n            return { OpeartionComponent: this.OperationButtonsComponent }\n        }\n\n        GetOrderByList() {\n            let orderByList = [{ Name: \"CreateDate\", IsDesc: true }]\n            return orderByList\n        }\n\n        GetGridViewComponents() {\n            this.DataGridComponent = new DataGrid({ Entity: this.Entity, Properties: this.DataProperties, KeyName: this.KeyName })\n            if (this.IsPage) this.DataPagingComponent = new DataPaging({\n                KeyName: this.KeyName,\n                PageSize: this.PageSize,\n                SearchAction: this.SearchActions[0]\n            })\n            else this.DataPagingComponent = null\n\n            return { DataGridComponent: this.DataGridComponent, DataPagingComponent: this.DataPagingComponent }\n        }\n\n        GetSearchComponents() {\n            this.SearchButtonsComponent = new Buttons({ Actions: this.GetSearchActions() })\n            this.SearchComponents = this.SearchProperties.map((p) => new PropertyItem({\n                Property: p,\n                EnterControl: this.SearchButtonsComponent.ControlList[0]\n            }))\n\n            return { ComponentList: this.SearchComponents, ButtonComponentList: [this.SearchButtonsComponent] }\n        }\n\n        GetSearchActions() {\n            this.SearchActions = []\n\n            this.SearchActions.push(new SearchAction(this))\n            this.SearchActions.push(new NewAddAction(this))\n\n            return this.SearchActions\n        }\n\n        PageLoad() {\n            HtmlTag.SetHtml(document.body, this.GetHtml())\n\n            this.EventLoad()\n            this.DataLoad()\n\n            this.SearchActions[0].Invoke()\n        }\n\n        GetHtml() {\n            let html = []\n            html.push(`<div class=\"${this.Styles.HtmlPage}\">`)\n\n            html.push(this.MenuLayout.GetHtml())\n\n            html.push(this.SerachLayout.GetHtml())\n            this.OpeartionActions.length > 0 && html.push(this.DataOperationLayout.GetHtml())\n            html.push(this.GridViewLayout.GetHtml())\n\n            html.push(\"</div>\")\n            return html.join(\"\")\n        }\n\n        EventLoad() {\n            this.MenuComponent.EventLoad()\n            this.LoginComponent.EventLoad()\n\n            this.SearchComponents.forEach((c) => c.EventLoad())\n            this.SearchButtonsComponent.EventLoad()\n\n            this.DataGridComponent.EventLoad()\n            this.DataPagingComponent && this.DataPagingComponent.EventLoad()\n\n            this.SearchActions[0].InitConditionList = this.GetSearchCondition()\n\n            this.OpeartionActions.length > 0 && this.OperationButtonsComponent.EventLoad()\n        }\n\n        DataLoad() {\n            this.MenuComponent.DataLoad()\n            this.LoginComponent.DataLoad()\n\n            this.SearchComponents.forEach((c) => c.DataLoad())\n            this.SearchButtonsComponent.DataLoad()\n\n            this.DataGridComponent.DataLoad()\n            this.DataPagingComponent && this.DataPagingComponent.DataLoad()\n\n            this.OpeartionActions.length > 0 && this.OperationButtonsComponent.DataLoad()\n        }\n\n        GetSearchCondition() {\n            const condition = {}\n            this.SearchComponents.forEach((c) => condition[c.Property.Name] = c.GetValue())\n\n            let conditionList = this.SearchProperties.map((p) => {\n                return {\n                    Name: p.Name,\n                    Logic: p.Logic || \"=\",\n                    Value: condition[p.Name] || \"\"\n                }\n            })\n\n            return conditionList.filter((f) => !Common.IsNullOrEmpty(f.Value))\n        }\n\n        SetInitConditionList(conditionList) {\n            const condition = {}\n            conditionList.forEach(c => condition[c.Name] = c.Value)\n            let value = \"\"\n            this.SearchComponents.forEach(c => {\n                value = condition[c.Property.Name] === undefined ? \"\" : condition[c.Property.Name]\n                c.SetValue(value)\n            })\n        }\n\n        GetHeaderInfoList() {\n            return this.DataProperties.map((p) => { return { Name: p.Name, Label: p.Label } })\n        }\n    }\n\n})($ns);\n((ns) => {\n    const { Index } = ns.pages\n    const { Common } = ns.utils\n    const { PropertyItem, Dialog } = ns.components\n    const { EditLayout } = ns.layouts\n    const { CreateAction, UpdateAction } = ns.actions\n\n    ns.pages.EditPage = class extends Index {\n        constructor(options) {\n            options.PageName = options.PageName || \"EditPage\"\n            super(options)\n\n            Common.InitValue(this, [\"IsDialog\"], true)\n            this.Title = this.Title || (this.IsUpdate ? \"修改\" : \"新增\") + this.Entity.Label\n            this.Styles.EditPage = this.Styles.EditPage || \"EditPage\"\n        }\n\n        PageInit() {\n            ns.data.Index.InitEditPageEntityState(this.KeyName)\n\n            this.Entity.ExpandPageInit && this.Entity.ExpandPageInit.call(this, ns)\n            this.EditProperties = this.Entity.Properties.filter((p) => p.IsEdit).map((p) => Object.assign({ IsVisible: true }, p, p.EditOptions))\n\n            this.EditLayout = new EditLayout(this.GetEditComponents())\n\n            this.IndexAction = new ns.actions.Index(this)\n        }\n\n        GetEditComponents() {\n            this.EditComponents = this.EditProperties.filter(f => f.IsVisible).map((p) => new PropertyItem({ Property: p }))\n\n            return { ComponentList: this.EditComponents }\n        }\n\n        PageLoad() {\n            if (this.IsDialog) {\n                let html = this.GetHtml()\n                let width = this.Width > 0 ? this.Width : this.EditLayout.Width\n                let height = this.Height > 0 ? this.Height : this.EditLayout.Height\n\n                this.EditDialog = new ns.components.Dialog({\n                    Width: width,\n                    Height: height,\n                    Html: html,\n                    Title: this.Title,\n                    OkAction: this.IsUpdate ? new UpdateAction(this) : new CreateAction(this)\n                })\n                this.EditDialog.Show()\n            }\n            else {\n                HtmlTag.SetHtml(document.body, this.GetHtml())\n            }\n            this.EventLoad()\n            this.DataLoad()\n        }\n\n        GetHtml() {\n            let html = []\n            html.push(`<div class=\"${this.Styles.EditPage}\">`)\n\n            html.push(this.EditLayout.GetHtml())\n\n            html.push(\"</div>\")\n            return html.join(\"\")\n        }\n\n        EventLoad() {\n            this.EditComponents.forEach((c) => c.EventLoad())\n        }\n\n        DataLoad() {\n            this.EditComponents.forEach((c) => c.DataLoad())\n\n            if (this.IsUpdate) {\n                if (this.IsLocalData) {\n                    this.EditComponents.forEach(c => c.SetValue(this.RowData[c.Property.Name]))\n                }\n                else {\n                    this.GetEntityData()\n                }\n            }\n        }\n\n        GetEntityData() {\n            this.IndexAction.GetEntityData(this.Entity, this.EditProperties.map(p => p.Name), this.RowData[this.Entity.PrimaryKey]).then(res => {\n                if (res.IsSuccess) {\n                    let data = Common.ArrayFirst(res.Data.DataList)\n                    if (data) {\n                        this.EntityData = data;\n                        this.Entity.ExpandGetEditData && this.Entity.ExpandGetEditData.call(this, data, ns)\n                        this.EditComponents.forEach(c => c.SetValue(data[c.Property.Name]))\n                    }\n                }\n                else {\n                    Common.Alert(res.Message)\n                }\n            })\n        }\n\n        GetEditData() {\n            let data = {}\n            if (this.IsUpdate) {\n                data[this.Entity.PrimaryKey] = this.RowData[this.Entity.PrimaryKey]\n                data.RowVersion = this.RowData.RowVersion\n            }\n            let blValidate = true\n            let value = \"\", c = null\n            for (let i = 0; i < this.EditComponents.length; i++) {\n                c = this.EditComponents[i]\n                value = c.GetValue()\n                if (c.Validate(value, data) === false) {\n                    blValidate = false\n                    break\n                }\n                if (!Common.IsNullOrEmpty(value)) {\n                    data[c.Property.Name] = value\n                }\n                else if (this.IsUpdate && !c.IsPassword) {\n                    data[c.Property.Name] = null\n                }\n            }\n            if (!blValidate) return false\n\n            if (this.Entity.ExpandSetEditData) data = this.Entity.ExpandSetEditData.call(this, data, this.IsUpdate, ns)\n            if (data === false) return false\n\n            if (this.IsUpdate && this.CompareValueEquals(data)) return false\n\n            return data\n        }\n\n        CompareValueEquals(data) {\n            if (!this.EntityData) return false;\n            let blEquals = true\n            for (let key in data) {\n                if (key != this.Entity.PrimaryKey && key != \"RowVersion\" && !Common.IsEquals(this.EntityData[key], data[key])) {\n                    blEquals = false\n                    break\n                }\n            }\n            if (blEquals) Common.Alert(\"对不起，您未对信息进行编辑！\")\n            return blEquals\n        }\n\n        ClearControlValue() {\n            this.EditComponents.forEach((c) => c.SetValue(\"\"))\n        }\n    }\n\n})($ns);"}]}}
                  EntityName:DataAccess
                  MethodName:Create
                   IPAddress:::1
               OperationUser:
                   StartTime:2017-08-03 15:04:13.822
                     EndTime:2017-08-03 15:04:13.921
         ElapsedMilliseconds:88



Response:
{"Ack":{"IsSuccess":true,"StatusCode":0,"StatusMessage":""},"Data":{"RequestType":"Create","Ids":"d76334de-553c-4cb4-8f71-913691994629"}}
